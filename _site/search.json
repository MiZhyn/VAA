[
  {
    "objectID": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html",
    "href": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html",
    "title": "TakeHome Ex03",
    "section": "",
    "text": "FishEye analysts have long wanted to better understand the flow of commercially caught fish through Oceanus’s various ports. However, when loading data into CatchNet, they discovered that they had purchased port exit records (i.e., records of trucks/trains leaving the port area) instead of ship off-load records. Port exit records do not include information on which vessels delivered the products. Given this limitation, we need to develop a visualization system to associate vessels with their probable cargos, analyze which vessels delivered which products and when, and identify seasonal trends and anomalies in the port exit records.\n\n\nGoal: Develop a visualization system to associate vessels with their probable cargos.\nSteps:\n\nUsing Transaction_data, Harbor_Reports_data, and TransponderPing data, gradually match orders with vessels, and filter out unlikely vessels by examining their historical routes with vessel_movement_data.\nDevelop an interactive visualization to display the association between cargo and probable vessels.\nAnalyze and visualize the seasonality of cargo and detect anomalies in port exit records to gain actionable insights."
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#approach-for-sub-q1",
    "href": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#approach-for-sub-q1",
    "title": "TakeHome Ex03",
    "section": "",
    "text": "Goal: Develop a visualization system to associate vessels with their probable cargos.\nSteps:\n\nUsing Transaction_data, Harbor_Reports_data, and TransponderPing data, gradually match orders with vessels, and filter out unlikely vessels by examining their historical routes with vessel_movement_data.\nDevelop an interactive visualization to display the association between cargo and probable vessels.\nAnalyze and visualize the seasonality of cargo and detect anomalies in port exit records to gain actionable insights."
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#import-packages",
    "href": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#import-packages",
    "title": "TakeHome Ex03",
    "section": "2.1. Import packages",
    "text": "2.1. Import packages\n\npacman::p_load(sf, tidyverse,jsonlite,dplyr,stringr,knitr,ggplot2,lubridate,ggiraph,viridis,plotly,gridExtra,readr)"
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#import-data",
    "href": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#import-data",
    "title": "TakeHome Ex03",
    "section": "2.2 Import Data",
    "text": "2.2 Import Data\n\nvessel_movement_data &lt;- read_rds(\"vessel_movement_data.rds\")\nHarbor_Reports_data &lt;- read_rds(\"Harbor_Reports_data.rds\")\nTransaction_data &lt;- read_rds(\"Transaction_data.rds\")\n\n\nVessel Movement dataHarbor Reports dataTransaction data\n\n\n\nhead(vessel_movement_data)\n\n                 time    dwell                  source            target\n1 2035-02-04 05:38:47 109499.9 City of South Paackland albacoreangler47d\n2 2035-02-05 12:47:49 558730.2 City of South Paackland albacoreangler47d\n3 2035-02-15 05:30:39 109888.3 City of South Paackland albacoreangler47d\n4 2035-02-19 05:28:51 153271.8 City of South Paackland albacoreangler47d\n5 2035-03-01 05:21:21 326318.7 City of South Paackland albacoreangler47d\n6 2035-03-08 05:27:16 110156.3 City of South Paackland albacoreangler47d\n\n\n\n\n\nhead(Transaction_data)\n\n  date_added              source                  target\n1 2035-11-04 cargo_2035_2394778c City of South Paackland\n2 2035-08-17 cargo_2035_23956ba0 City of South Paackland\n3 2035-08-21 cargo_2035_23957cfd City of South Paackland\n4 2035-11-07 cargo_2035_23958501       City of Paackland\n5 2035-08-24 cargo_2035_23959ab6 City of South Paackland\n6 2035-08-28 cargo_2035_23960fa9 City of South Paackland\n\n\n\n\n\nhead(Harbor_Reports_data)\n\n  date_added          source           target\n1 2035-09-21 wavewranglerc2d City of Haacklee\n2 2035-08-20 wavewranglerc2d City of Haacklee\n3 2035-09-18 wavewranglerc2d City of Haacklee\n4 2035-08-16 wavewranglerc2d   City of Himark\n5 2035-09-26 wavewranglerc2d   City of Himark\n6 2035-04-11 wavewranglerc2d   City of Lomark"
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#data-merging",
    "href": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#data-merging",
    "title": "TakeHome Ex03",
    "section": "3.1 Data Merging:",
    "text": "3.1 Data Merging:\n\n  merged_data &lt;- left_join(Transaction_data, Harbor_Reports_data, by = c(\"target\", \"date_added\"), suffix = c(\".transaction\", \".harborreport\"))\n\nWarning in left_join(Transaction_data, Harbor_Reports_data, by = c(\"target\", : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1337 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\n\nShow the code\n# 找出多对多关系的行\ntransaction_counts &lt;- Transaction_data %&gt;%\n  group_by(target, date_added) %&gt;%\n  tally(name = \"transaction_count\")\n\nharborreport_counts &lt;- Harbor_Reports_data %&gt;%\n  group_by(target, date_added) %&gt;%\n  tally(name = \"harborreport_count\")\n\nmany_to_many &lt;- transaction_counts %&gt;%\n  inner_join(harborreport_counts, by = c(\"target\", \"date_added\")) %&gt;%\n  filter(transaction_count &gt; 1 | harborreport_count &gt; 1) %&gt;%\n  mutate(many_to_many = TRUE)\n\n# 标记 Transaction_data 中的多对多关系\nsuppressWarnings({\nTransaction_datam &lt;- Transaction_data %&gt;%\n  left_join(many_to_many %&gt;% select(target, date_added, many_to_many), by = c(\"target\", \"date_added\")) %&gt;%\n  mutate(many_to_many = ifelse(is.na(many_to_many), FALSE, many_to_many))\n})\n\n# 合并数据框并保留多对多标记\nsuppressWarnings({\nmerged_data &lt;- left_join(Transaction_datam, Harbor_Reports_data, by = c(\"target\", \"date_added\"), suffix = c(\".transaction\", \".harborreport\"))%&gt;%\n  arrange(date_added)\n})\n\nmany_to_many_records &lt;- merged_data %&gt;%\n  filter(many_to_many == TRUE)\n\n\n\nhead(merged_data)\n\n  date_added  source.transaction            target many_to_many\n1 2035-02-04 cargo_2035_24532325    City of Himark        FALSE\n2 2035-02-04 cargo_2035_25112180    City of Himark        FALSE\n3 2035-02-06 cargo_2035_26982160  City of Haacklee         TRUE\n4 2035-02-06 cargo_2035_27635493 City of Paackland         TRUE\n5 2035-02-06 cargo_2035_27635493 City of Paackland         TRUE\n6 2035-02-06 cargo_2035_27635493 City of Paackland         TRUE\n   source.harborreport\n1                 &lt;NA&gt;\n2                 &lt;NA&gt;\n3    groupergrabber60d\n4 bluefintunabandit177\n5     squidsquasherda9\n6    mahimahimaster04f\n\n\nNote that this will result in a many-to-many relationship where each order may correspond to multiple vessels.In subsequent steps, apply additional criteria and filters to narrow down the list of potential vessels for each order."
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#identifying-matched-records",
    "href": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#identifying-matched-records",
    "title": "TakeHome Ex03",
    "section": "3.2 Identifying Matched Records",
    "text": "3.2 Identifying Matched Records\nAfter filtering all many-to-many relationships, we identified two possibilities:\n1.A vessel transported multiple orders： This situation is reasonable and can be directly matched. For example, the “AlbacoreAngler7D” fishing vessel transported orders “cargo_2035_266231e2,” “cargo_2035_30645f1a,” and “cargo_2035_31189bb6” to the city of Packland.\n\n2.An order shows as being possibly transported by multiple vessels. For instance, “cargo_2035_30547452a” might have been transported by either “TransAtlantic47A9” or “SeawayServicesC71.” Further filtering is needed to determine the specific vessel.\n\nUsing this method, 32% of the records have been matched. The remaining 67% of the records will be further analyzed in subsequent steps to identify potential corresponding vessels.\n\n\nShow the code\n# Calculate the number of source.harborreport counts for each combination\nharborreport_counts &lt;- merged_data %&gt;%\n  group_by(date_added, source.transaction, target) %&gt;%\n  summarise(harborreport_count = n_distinct(source.harborreport), .groups = 'drop')\n\n# Update the many_to_many column, set to FALSE only when the condition is met\nmerged_data_clean &lt;- merged_data %&gt;%\n  left_join(harborreport_counts, by = c(\"date_added\", \"source.transaction\", \"target\")) %&gt;%\n  mutate(many_to_many = ifelse(many_to_many == TRUE & harborreport_count == 1, FALSE, many_to_many))\n\nmerged_data_clean &lt;- merged_data_clean %&gt;%\n  mutate(unmatch = ifelse(many_to_many == TRUE | is.na(source.harborreport), \"unmatch\", \"match\"))\n\nTransaction_matchresult1 &lt;- merged_data_clean %&gt;%\n  select(date_added, source.transaction, target, unmatch) %&gt;%\n  distinct()\n\nTransaction_matchresult1match &lt;- Transaction_matchresult1 %&gt;%\n  group_by(unmatch) %&gt;%\n  summarise(Count = n()) %&gt;%\n  mutate(Proportion = paste0(round(Count / sum(Count) * 100, 2), \"%\"))\n\n\n\nkable(Transaction_matchresult1match, align = \"c\")\n\n\n\n\nunmatch\nCount\nProportion\n\n\n\n\nmatch\n1726\n32.52%\n\n\nunmatch\n3581\n67.48%"
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#visualization-to-associate-cargos-with-probable-vessels",
    "href": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#visualization-to-associate-cargos-with-probable-vessels",
    "title": "TakeHome Ex03",
    "section": "3.3 Visualization to Associate Cargos with Probable Vessels",
    "text": "3.3 Visualization to Associate Cargos with Probable Vessels\n\n\nShow the code\n# 数据处理\n\nTransaction_matchresult1_visual&lt;- merged_data_clean %&gt;%\ngroup_by(date_added, source.transaction, target) %&gt;%\nmutate(probable_vessel = case_when(\n           unmatch == \"match\" ~ source.harborreport,\n           is.na(source.harborreport) ~ NA_character_,\n           TRUE ~ paste(unique(source.harborreport), collapse = \", \")\n         )) %&gt;%\nselect(date_added, source.transaction, target,unmatch,probable_vessel)%&gt;%\ndistinct()\n\n# 将date_added列转换为日期格式\nTransaction_matchresult1_visual$date_added &lt;- ymd(Transaction_matchresult1_visual$date_added)\n\n# 提取季度信息\nTransaction_matchresult1_visual &lt;- Transaction_matchresult1_visual %&gt;%\n  mutate(quarter = paste0(year(date_added), \"-Q\", quarter(date_added)))\n\n# 创建交互式散点图\np &lt;- ggplot(Transaction_matchresult1_visual, aes(x = quarter, y = 0, fill = unmatch,\n                                                 data_id = source.transaction,\n                                                 tooltip = paste(\"Date:\", date_added, \"&lt;br&gt;\",\n                                                                 \"Source Transaction:\", source.transaction, \"&lt;br&gt;\",\n                                                                 \"Probable Vessel:\", probable_vessel))) +\n  geom_point_interactive(size = 5, shape = 21, color = \"white\", \n                         position = position_jitter(width = 0.4, height = 0.05)) +\n  scale_fill_manual(values = c(\"match\" = \"green\", \"unmatch\" = \"red\")) +\n  labs(title = \"Summary of Cargos Match across Date & Quantity\",\n       x = \"Transaction Quarter\", y = NULL, fill = \"Match Status\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 20),\n        axis.text = element_text(size = 20),\n        axis.title = element_text(size = 20),\n        panel.grid.major.x = element_line(color = \"gray\", linetype = \"dashed\"),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        legend.text = element_text(size = 20),\n        strip.text.y = element_text(size = 20, angle = 0),\n        legend.position = \"top\",\n        strip.background = element_rect(fill = \"gray80\", color = \"gray50\"), # 设置facet标题栏背景颜色\n        panel.background = element_rect(fill = \"gray90\"), # 设置facet区域背景颜色\n        plot.title = element_text(size = 25, hjust = 0.5)) +\n  facet_grid(target ~ ., scales = \"free\", space = \"free\") +\n  guides(x = guide_axis(angle = 45))\n\n# 转换为交互式图表\ngirafe(ggobj = p, width_svg = 25, height_svg = 15, options = list(\n  opts_sizing(rescale = TRUE)))"
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#data-prepare",
    "href": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#data-prepare",
    "title": "TakeHome Ex03",
    "section": "5.1 Data prepare",
    "text": "5.1 Data prepare\n\n\nShow the code\nsuppressWarnings({\n\n\nmerged_data_na_clean_many&lt;- merged_data_NA_checkmclean %&gt;%\n  select(date_added, source.transaction, target,fishvessel)\n\nmerged_data_clean_many &lt;- merged_data_clean %&gt;%\n  filter(unmatch == \"unmatch\" & !is.na(source.harborreport)) %&gt;%\n  select(date_added, source.transaction, target, source.harborreport) %&gt;%\n  rename(fishvessel=source.harborreport)\n\nmerged_union_data &lt;- bind_rows(merged_data_clean_many, merged_data_na_clean_many)%&gt;%\n  arrange(date_added,fishvessel)\n\nmerged_union_datav&lt;- merged_union_data %&gt;%\n  select(date_added,target,fishvessel) %&gt;%\n  distinct()\n\n\n# Step 2: Identify the earliest timestamp for each fishvessel in each target city on each date_added\nearliest_timestamp &lt;- vessel_movement_data %&gt;%\n  mutate(time_date = as.Date(time)) %&gt;%\n  group_by(time_date, source, target) %&gt;%\n  mutate(earliest_time = min(time),\n         is_earliest = time == min(time)) %&gt;%\n  ungroup()%&gt;%\n  select(time,source,target,time_date,is_earliest) %&gt;%\n  rename(Portcity=source,vessel=target)%&gt;%\n  filter(is_earliest==TRUE)\n\nmerged_data_earliest &lt;- earliest_timestamp %&gt;%\n  right_join(merged_union_datav, \n            by = c(\"time_date\" = \"date_added\",\"vessel\"=\"fishvessel\", \"Portcity\" = \"target\"))%&gt;%\n  select(time,Portcity,vessel)\n\nvessel_movemen_timestamp &lt;- vessel_movement_data %&gt;%\n  select(time,source,target) %&gt;%\n  rename(Portcity=source,vessel=target)%&gt;%\n  distinct()\n\nmerged_data_earlcheck &lt;- vessel_movemen_timestamp %&gt;%\n  mutate(flag = ifelse(paste(time, Portcity, vessel) %in% paste(merged_data_earliest$time, merged_data_earliest$Portcity, merged_data_earliest$vessel), \"Exist\", \"Not Exist\"))%&gt;%\n  arrange(vessel,time)\n})\n\n\n\n# View the final result\nhead(merged_data_earlcheck)\n\n                 time                Portcity            vessel      flag\n1 2035-02-04 05:38:47 City of South Paackland albacoreangler47d Not Exist\n2 2035-02-05 12:47:49 City of South Paackland albacoreangler47d Not Exist\n3 2035-02-15 05:30:39 City of South Paackland albacoreangler47d Not Exist\n4 2035-02-19 05:28:51 City of South Paackland albacoreangler47d Not Exist\n5 2035-03-01 05:21:21 City of South Paackland albacoreangler47d Not Exist\n6 2035-03-08 05:27:16 City of South Paackland albacoreangler47d Not Exist"
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#historical-path-analysis",
    "href": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#historical-path-analysis",
    "title": "TakeHome Ex03",
    "section": "5.2 Historical Path Analysis",
    "text": "5.2 Historical Path Analysis\n\n\nShow the code\ncalc_other_cities &lt;- function(data) {\n  data %&gt;%\n    group_by(vessel) %&gt;%\n    mutate(\n      other_cities_past = sapply(1:n(), function(i) {\n        past_cities &lt;- unique(Portcity[time &gt;= time_range_start_past[i] & time &lt;= time_range_end_past[i] & Portcity != Portcity[i]])\n        length(past_cities)\n      }),\n      other_cities_future = sapply(1:n(), function(i) {\n        future_cities &lt;- unique(Portcity[time &gt;= time_range_start_future[i] & time &lt;= time_range_end_future[i] & Portcity != Portcity[i]])\n        length(future_cities)\n      })\n    ) %&gt;%\n    ungroup()\n}\n\nmerged_data_earlcheck1 &lt;- merged_data_earlcheck %&gt;%\n  mutate(\n    time = as.POSIXct(time),  # 将时间列转换为POSIXct格式\n    time_range_start_past = time - 24 * 60 * 60,  # 计算过去12小时的起始时间\n    time_range_end_past = time,  # 过去12小时的结束时间为当前时间\n    time_range_start_future = time,  # 未来12小时的起始时间为当前时间\n    time_range_end_future = time + 24 * 60 * 60  # 计算未来12小时的结束时间\n  )\n\nmerged_data_earlcheck1 &lt;- calc_other_cities(merged_data_earlcheck1)\n\nmerged_data_earlcheckexi &lt;- merged_data_earlcheck1%&gt;%\n    filter(flag == \"Exist\")\n\n# Calculate proportion and count of each value in the other_cities_past column\nresult &lt;- data.frame(table(merged_data_earlcheckexi$other_cities_past))\ncolnames(result) &lt;- c(\"Number of Cities Visited in Past 24 Hours\", \"Count\")\nresult$Proportion &lt;- prop.table(result$Count)\n\n# Convert proportion to percentage format\nresult$Proportion &lt;- paste0(round(result$Proportion * 100, 2), \"%\")\n\n# Sort by number of cities visited in past 24 hours\nresult &lt;- result[order(result$`Number of Cities Visited in Past 24 Hours`), ]\n\n# Print the result\nkable(result, align = \"c\")\n\n\n\n\n\nNumber of Cities Visited in Past 24 Hours\nCount\nProportion\n\n\n\n\n0\n4391\n86.92%\n\n\n1\n553\n10.95%\n\n\n2\n90\n1.78%\n\n\n3\n18\n0.36%\n\n\n\n\n\nInitially setting the historical and future durations to 24 hours resulted in mostly zero matches, indicating infrequent city round-trips within 24 hours. Now, with the observation period extended to 72 hours, we aim to gain a clearer understanding of vessel movements and their relevance to the transaction data.\n\n\nShow the code\nmerged_data_earlcheck2 &lt;- merged_data_earlcheck %&gt;%\n  mutate(\n    time = as.POSIXct(time),  # Convert the time column to POSIXct format\n    time_range_start_past = time - 72 * 60 * 60,  # Calculate the start time for the past 72 hours\n    time_range_end_past = time,  # End time for the past 72 hours is the current time\n    time_range_start_future = time,  # Start time for the future 72 hours is the current time\n    time_range_end_future = time + 72 * 60 * 60  # Calculate the end time for the future 72 hours\n  )\n\nmerged_data_earlcheck2 &lt;- calc_other_cities(merged_data_earlcheck2)\n\nmerged_data_earlcheck2exi &lt;- merged_data_earlcheck2 %&gt;%\n    filter(flag == \"Exist\")\n\n# Calculate proportion and count of each value in the other_cities_past column\nresult &lt;- data.frame(table(merged_data_earlcheck2exi$other_cities_past))\ncolnames(result) &lt;- c(\"Number of Cities Visited in Past 72 Hours\", \"Count\")\nresult$Proportion &lt;- prop.table(result$Count)\n\n# Convert proportion to percentage format\nresult$Proportion &lt;- paste0(round(result$Proportion * 100, 2), \"%\")\n\n# Sort by number of cities visited in past 72 hours\nresult &lt;- result[order(result$`Number of Cities Visited in Past 72 Hours`), ]\n\n# Print the result\nkable(result, align = \"c\")\n\n\n\n\n\nNumber of Cities Visited in Past 72 Hours\nCount\nProportion\n\n\n\n\n0\n4018\n79.53%\n\n\n1\n895\n17.72%\n\n\n2\n50\n0.99%\n\n\n3\n31\n0.61%\n\n\n4\n58\n1.15%"
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#identifying-unlikely-vessels",
    "href": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#identifying-unlikely-vessels",
    "title": "TakeHome Ex03",
    "section": "5.3 Identifying Unlikely Vessels",
    "text": "5.3 Identifying Unlikely Vessels\n\n\nShow the code\n# Create combined column\nmerged_data_earlcheck2exi$combination &lt;- paste(merged_data_earlcheck2exi$other_cities_past, merged_data_earlcheck2exi$other_cities_future, sep = \", \")\n\n# Calculate count and proportion for each combination\nresult &lt;- data.frame(table(merged_data_earlcheck2exi$combination))\ncolnames(result) &lt;- c(\"City Visits in Past and Future 72 Hours\", \"Count\")\nresult$Proportion &lt;- prop.table(result$Count)\n\n# Convert proportion to percentage format\nresult$Proportion &lt;- paste0(round(result$Proportion * 100, 2), \"%\")\n\n# Sort by combination column\nresult &lt;- result[order(result$`City Visits in Past and Future 72 Hours`), ]\n\n# Print the result\nkable(result, align = \"c\")\n\n\n\n\n\nCity Visits in Past and Future 72 Hours\nCount\nProportion\n\n\n\n\n0, 0\n3673\n72.7%\n\n\n0, 1\n334\n6.61%\n\n\n0, 2\n1\n0.02%\n\n\n0, 3\n1\n0.02%\n\n\n0, 4\n9\n0.18%\n\n\n1, 0\n314\n6.22%\n\n\n1, 1\n557\n11.03%\n\n\n1, 2\n1\n0.02%\n\n\n1, 3\n18\n0.36%\n\n\n1, 4\n5\n0.1%\n\n\n2, 1\n2\n0.04%\n\n\n2, 2\n23\n0.46%\n\n\n2, 3\n6\n0.12%\n\n\n2, 4\n19\n0.38%\n\n\n3, 0\n1\n0.02%\n\n\n3, 1\n9\n0.18%\n\n\n3, 2\n15\n0.3%\n\n\n3, 3\n3\n0.06%\n\n\n3, 4\n3\n0.06%\n\n\n4, 0\n14\n0.28%\n\n\n4, 1\n15\n0.3%\n\n\n4, 2\n16\n0.32%\n\n\n4, 3\n5\n0.1%\n\n\n4, 4\n8\n0.16%\n\n\n\n\n\n\n\nShow the code\n# Split the column \"City Visits in Past and Future 72 Hours\" into two columns\nresult1 &lt;- result %&gt;%\n  separate(`City Visits in Past and Future 72 Hours`, c(\"past\", \"future\"), sep = \", \")\n\n# Convert past and future columns to numeric type\nresult1$past &lt;- as.numeric(result1$past)\nresult1$future &lt;- as.numeric(result1$future)\n\n# Convert the proportion column to numeric type\nresult1$Proportion &lt;- as.numeric(gsub(\"%\", \"\", result1$Proportion))\n\n# Normalize the proportion using min-max normalization\nresult1$log_ratio &lt;- log10(result1$Proportion)\n\n# Create a scatter plot\nggplot(result1, aes(x = past, y = future, size = log_ratio, color = log_ratio)) +\n  geom_point(alpha = 0.7) +\n  scale_size(range = c(1, 10), labels = function(x) paste0(round(x * 100, 2), \"%\")) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n        legend.position = \"right\") +\n  labs(title = \"Trend of City Visits in Past and Future 72 Hours\",\n       x = \"Cities Visited in Past 72 Hours\",\n       y = \"Cities Visited in Future 72 Hours\")\n\n\n\n\n\nBased on the above definitions, we can exclude the following combinations:\n\n0,0: This combination indicates that the vessel remained at the current port for both the past 3 days and the next 3 days, which does not align with the requirement of vessels transporting goods from other cities to the current port.\nVisits to more than 3 cities in the past 3 days or future 3 days: These combinations can likely be excluded as vessels involved are probably engaged in tourism or sightseeing activities rather than cargo transport.\n\nThe following combinations are considered for further review: (0, 1), (0, 2), (0, 3), (0, 4), (1, 1), (2, 1), (3, 1), (4, 1), (1, 2), (2, 2). These combinations indicate scenarios where vessels visited a limited number of cities, suggesting potential involvement in cargo transport rather than tourism or sightseeing activities. Each combination will be carefully assessed to determine their suitability regarding the transportation of goods from other cities to the current port"
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#visualization-to-associate-cargos-with-probable-vessels-1",
    "href": "Takehome_Ex/TakeHome Ex03/Takehomeex03.html#visualization-to-associate-cargos-with-probable-vessels-1",
    "title": "TakeHome Ex03",
    "section": "5.4 Visualization to Associate Cargos with Probable Vessels",
    "text": "5.4 Visualization to Associate Cargos with Probable Vessels\n\n\nShow the code\nsuppressWarnings({\n# 指定要保留的组合向量\ncombinations_to_keep &lt;- c(\"0, 1\", \"0, 2\", \"0, 3\", \"0, 4\", \"1, 1\", \"2, 1\", \"3, 1\", \"4, 1\", \"1, 2\", \"2, 2\",\"1, 3\")\n\n# 筛选出combination列等于指定组合的行\nmerged_data_manytomany_match &lt;- merged_data_earlcheck2exi %&gt;%\n  filter(combination %in% combinations_to_keep)%&gt;%\n  mutate(time_date = as.Date(time))%&gt;%\n  select(Portcity,vessel,time_date)\n\nmerged_data_finalcheck &lt;- merged_data_clean %&gt;%\n  left_join(merged_data_manytomany_match, \n            by = c(\"date_added\" = \"time_date\", \"target\" = \"Portcity\"))\n\nmerged_data_finalcheck_modified &lt;- merged_data_finalcheck %&gt;%\n  mutate(Fishvessel = coalesce(vessel, source.harborreport))%&gt;%\n  mutate(unmatch = if_else(is.na(Fishvessel), \"unmatch\", \"match\"))%&gt;%\n  select(date_added,source.transaction,target,unmatch,Fishvessel)\n\nmerged_data_finalcheck_modified &lt;- merged_data_finalcheck_modified %&gt;%\n  group_by(date_added, target) %&gt;%\n  mutate(probable_vesselcount = n_distinct(Fishvessel)) %&gt;%\n  ungroup()\n\nTransaction_matchresult2_visual&lt;- merged_data_finalcheck_modified %&gt;%\n  group_by(date_added, source.transaction, target) %&gt;%\n  mutate(probable_vessel = case_when(\n           probable_vesselcount == 1 ~ Fishvessel,\n           is.na(Fishvessel) ~ NA_character_,\n           TRUE ~ paste(unique(Fishvessel), collapse = \", \")\n         )) %&gt;%\nselect(date_added, source.transaction, target,unmatch,probable_vessel,probable_vesselcount)%&gt;%\ndistinct()\n \n# 将date_added列转换为日期格式\nTransaction_matchresult1_visual$date_added &lt;- ymd(Transaction_matchresult1_visual$date_added)\n\n# 提取季度信息\nTransaction_matchresult2_visual &lt;- Transaction_matchresult2_visual %&gt;%\n  mutate(quarter = paste0(year(date_added), \"-Q\", quarter(date_added)))\n\n# 创建交互式散点图\np &lt;- ggplot(Transaction_matchresult2_visual, aes(x = quarter, y = 0, fill = unmatch,\n                                                 data_id = source.transaction,\n                                                 tooltip = paste(\"Date:\", date_added, \"&lt;br&gt;\",\n                                                                 \"Source Transaction:\", source.transaction, \"&lt;br&gt;\",\n                                                                 \"Probable Vessel:\", probable_vessel))) +\n  geom_point_interactive(size = 5, shape = 21, color = \"white\", \n                         position = position_jitter(width = 0.4, height = 0.05)) +\n  scale_fill_manual(values = c(\"match\" = \"green\", \"unmatch\" = \"red\")) +\n  labs(title = \"Summary of Cargos Match across Date & Quantity\",\n       x = \"Transaction Quarter\", y = NULL, fill = \"Match Status\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 20),\n        axis.text = element_text(size = 20),\n        axis.title = element_text(size = 20),\n        panel.grid.major.x = element_line(color = \"gray\", linetype = \"dashed\"),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        legend.text = element_text(size = 20),\n        strip.text.y = element_text(size = 20, angle = 0),\n        legend.position = \"top\",\n        strip.background = element_rect(fill = \"gray80\", color = \"gray50\"), # 设置facet标题栏背景颜色\n        panel.background = element_rect(fill = \"gray90\"), # 设置facet区域背景颜色\n        plot.title = element_text(size = 25, hjust = 0.5)) +\n  facet_grid(target ~ ., scales = \"free\", space = \"free\") +\n  guides(x = guide_axis(angle = 45))\n\n# 转换为交互式图表\ngirafe(ggobj = p, width_svg = 25, height_svg = 15, options = list(\n  opts_sizing(rescale = TRUE)))\n})"
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#background",
    "href": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#background",
    "title": "Takehome_ex01",
    "section": "1.1 Background",
    "text": "1.1 Background\nThe housing market in Singapore comprises both public and private sectors. Public housing serves individuals with monthly household incomes up to S$14,000, while those with higher incomes typically turn to the private residential market."
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#project-objectives",
    "href": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#project-objectives",
    "title": "Takehome_ex01",
    "section": "1.2 Project Objectives",
    "text": "1.2 Project Objectives\nIn this exercise, Exploratory Data Analysis (EDA) methods and ggplot functions are used to explore:\n\nthe distribution of\nthe relationship"
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#importing-libraries",
    "href": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#importing-libraries",
    "title": "Takehome_ex01",
    "section": "2.1 Importing libraries",
    "text": "2.1 Importing libraries\nWe load the following R packages using the pacman::p_load() function:\n\n#|eval=FALSE\npacman::p_load(tidyverse, ggstatsplot, ggridges, plotly, dplyr,wesanderson,lubridate)"
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#loading-data",
    "href": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#loading-data",
    "title": "Takehome_ex01",
    "section": "2.2 loading data",
    "text": "2.2 loading data\nThe dataset used in the exercise is transaction data of REALIS\nWe import this dataset by using read.csv() function\n\nfiles1&lt;-read.csv(\"data/ResidentialTransaction20240308160536.csv\")\nfiles2&lt;-read.csv(\"data/ResidentialTransaction20240308160736.csv\")\nfiles3&lt;-read.csv(\"data/ResidentialTransaction20240308161009.csv\")\nfiles4&lt;-read.csv(\"data/ResidentialTransaction20240308161109.csv\")\nfiles5&lt;-read.csv(\"data/ResidentialTransaction20240414220633.csv\")"
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#glimpse-of-data",
    "href": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#glimpse-of-data",
    "title": "Takehome_ex01",
    "section": "2.3 Glimpse of data",
    "text": "2.3 Glimpse of data\nUsing the glimpse() function, we see the first 5 rows of five datasets (files1 to files5). These datasets likely contain private residential property transaction data, possibly segmented by different criteria such as date, type, and price. Further exploration is needed to understand the meaning of the fields, data types, presence of missing values, and how to integrate these datasets for analysis and visualization.\n\n\nShow the code\nhead(files1,5)\n\n\n             Project.Name Transacted.Price.... Area..SQFT. Unit.Price....PSF.\n1 THE REEF AT KING'S DOCK            2,317,000      882.65              2,625\n2         URBAN TREASURES            1,823,500      882.65              2,066\n3              NORTH GAIA            1,421,112     1,076.4              1,320\n4              NORTH GAIA            1,258,112    1,033.34              1,218\n5           PARC BOTANNIA            1,280,000      871.88              1,468\n    Sale.Date                       Address Type.of.Sale Type.of.Area\n1 01 Jan 2023 12 HARBOURFRONT AVENUE #05-32     New Sale       Strata\n2 02 Jan 2023        205 JALAN EUNOS #08-02     New Sale       Strata\n3 02 Jan 2023        29 YISHUN CLOSE #08-10     New Sale       Strata\n4 02 Jan 2023        45 YISHUN CLOSE #07-42     New Sale       Strata\n5 03 Jan 2023     12 FERNVALE STREET #06-16       Resale       Strata\n  Area..SQM. Unit.Price....PSM. Nett.Price...         Property.Type\n1         82             28,256             -           Condominium\n2         82             22,238             -           Condominium\n3        100             14,211             - Executive Condominium\n4         96             13,105             - Executive Condominium\n5         81             15,802             -           Condominium\n  Number.of.Units                 Tenure Completion.Date\n1               1 99 yrs from 12/01/2021     Uncompleted\n2               1               Freehold     Uncompleted\n3               1 99 yrs from 15/02/2021     Uncompleted\n4               1 99 yrs from 15/02/2021     Uncompleted\n5               1 99 yrs from 28/12/2016            2022\n  Purchaser.Address.Indicator Postal.Code Postal.District Postal.Sector\n1                         HDB       97996               4             9\n2                     Private      419535              14            41\n3                         HDB      269343              27            26\n4                         HDB      269294              27            26\n5                         HDB      797391              28            79\n    Planning.Region Planning.Area\n1    Central Region   Bukit Merah\n2       East Region         Bedok\n3      North Region        Yishun\n4      North Region        Yishun\n5 North East Region      Sengkang\n\n\nShow the code\nhead(files2,5)\n\n\n     Project.Name Transacted.Price.... Area..SQFT. Unit.Price....PSF.\n1     THE GAZANIA            1,528,000      678.13              2,253\n2     THE GAZANIA            1,938,000         958              2,023\n3  ONE PEARL BANK            2,051,000      699.66              2,931\n4 URBAN TREASURES            1,850,700      882.65              2,097\n5 HYLL ON HOLLAND            2,021,500      699.66              2,889\n    Sale.Date                 Address Type.of.Sale Type.of.Area Area..SQM.\n1 01 Apr 2023 15 HOW SUN DRIVE #02-31     New Sale       Strata         63\n2 01 Apr 2023  7 HOW SUN DRIVE #01-12     New Sale       Strata         89\n3 01 Apr 2023     1 PEARL BANK #32-16     New Sale       Strata         65\n4 01 Apr 2023  205 JALAN EUNOS #05-05     New Sale       Strata         82\n5 01 Apr 2023  97 HOLLAND ROAD #10-25     New Sale       Strata         65\n  Unit.Price....PSM. Nett.Price... Property.Type Number.of.Units\n1             24,254             -   Condominium               1\n2             21,775             -   Condominium               1\n3             31,554             -     Apartment               1\n4             22,570             -   Condominium               1\n5             31,100             -   Condominium               1\n                  Tenure Completion.Date Purchaser.Address.Indicator\n1               Freehold            2022                         N.A\n2               Freehold            2022                     Private\n3 99 yrs from 01/03/2019     Uncompleted                     Private\n4               Freehold     Uncompleted                         HDB\n5               Freehold     Uncompleted                     Private\n  Postal.Code Postal.District Postal.Sector   Planning.Region Planning.Area\n1      538545              19            53 North East Region     Serangoon\n2      538530              19            53 North East Region     Serangoon\n3      169016               3            16    Central Region        Outram\n4      419535              14            41       East Region         Bedok\n5      278541              10            27    Central Region   Bukit Timah\n\n\nShow the code\nhead(files3,5)\n\n\n  Project.Name Transacted.Price.... Area..SQFT. Unit.Price....PSF.   Sale.Date\n1         MYRA            1,658,000      667.37              2,484 01 Jul 2023\n2   NORTH GAIA            1,449,000     1,076.4              1,346 01 Jul 2023\n3   NORTH GAIA            1,365,000     1,076.4              1,268 01 Jul 2023\n4   NORTH GAIA            1,231,000         958              1,285 01 Jul 2023\n5   NORTH GAIA            1,272,000    1,001.05              1,271 01 Jul 2023\n                         Address Type.of.Sale Type.of.Area Area..SQM.\n1 9 MEYAPPA CHETTIAR ROAD #02-07     New Sale       Strata         62\n2         27 YISHUN CLOSE #10-06     New Sale       Strata        100\n3         27 YISHUN CLOSE #05-06     New Sale       Strata        100\n4         35 YISHUN CLOSE #08-25     New Sale       Strata         89\n5         45 YISHUN CLOSE #09-45     New Sale       Strata         93\n  Unit.Price....PSM. Nett.Price...         Property.Type Number.of.Units\n1             26,742             -             Apartment               1\n2             14,490             - Executive Condominium               1\n3             13,650             - Executive Condominium               1\n4             13,831             - Executive Condominium               1\n5             13,677             - Executive Condominium               1\n                  Tenure Completion.Date Purchaser.Address.Indicator\n1               Freehold     Uncompleted                         N.A\n2 99 yrs from 15/02/2021     Uncompleted                         HDB\n3 99 yrs from 15/02/2021     Uncompleted                         HDB\n4 99 yrs from 15/02/2021     Uncompleted                         HDB\n5 99 yrs from 15/02/2021     Uncompleted                         HDB\n  Postal.Code Postal.District Postal.Sector Planning.Region Planning.Area\n1      358456              13            35  Central Region     Toa Payoh\n2      769342              27            76    North Region        Yishun\n3      769342              27            76    North Region        Yishun\n4      769299              27            76    North Region        Yishun\n5      769294              27            76    North Region        Yishun\n\n\nShow the code\nhead(files4,5)\n\n\n   Project.Name Transacted.Price.... Area..SQFT. Unit.Price....PSF.   Sale.Date\n1  LEEDON GREEN            1,749,000       538.2              3,250 01 Oct 2023\n2      LIV @ MB            3,148,740    1,453.14              2,167 01 Oct 2023\n3          MORI            2,422,337    1,259.39              1,923 01 Oct 2023\n4     THE ARDEN            1,330,000      721.19              1,844 01 Oct 2023\n5 LENTOR MODERN            2,237,000    1,130.22              1,979 01 Oct 2023\n                     Address Type.of.Sale Type.of.Area Area..SQM.\n1   26 LEEDON HEIGHTS #11-08     New Sale       Strata         50\n2    114A ARTHUR ROAD #01-01     New Sale       Strata        135\n3 223 GUILLEMARD ROAD #05-21     New Sale       Strata        117\n4      6 PHOENIX ROAD #01-18     New Sale       Strata         67\n5    3 LENTOR CENTRAL #05-03     New Sale       Strata        105\n  Unit.Price....PSM. Nett.Price... Property.Type Number.of.Units\n1             34,980             -   Condominium               1\n2             23,324             -   Condominium               1\n3             20,704             -     Apartment               1\n4             19,851             -     Apartment               1\n5             21,305             -     Apartment               1\n                  Tenure Completion.Date Purchaser.Address.Indicator\n1               Freehold     Uncompleted                     Private\n2 99 yrs from 23/11/2021     Uncompleted                     Private\n3               Freehold     Uncompleted                     Private\n4 99 yrs from 14/07/2023     Uncompleted                     Private\n5 99 yrs from 26/10/2021     Uncompleted                     Private\n  Postal.Code Postal.District Postal.Sector   Planning.Region Planning.Area\n1      266221              10            26    Central Region   Bukit Timah\n2      439826              15            43    Central Region Marine Parade\n3      399738              14            39    Central Region       Geylang\n4      668159              23            66       West Region   Bukit Batok\n5      788888              26            78 North East Region    Ang Mo Kio\n\n\nShow the code\nhead(files5,5)\n\n\n       Project.Name Transacted.Price.... Area..SQFT. Unit.Price....PSF.\n1      THE LANDMARK            2,726,888     1,076.4              2,533\n2 POLLEN COLLECTION            3,850,000    1,808.35              2,129\n3    SKY EDEN@BEDOK            2,346,000    1,087.16              2,158\n4        TERRA HILL            2,190,000       807.3              2,713\n5     PINETREE HILL            1,954,000      796.54              2,453\n    Sale.Date                   Address Type.of.Sale Type.of.Area Area..SQM.\n1 01 Jan 2024 173 CHIN SWEE ROAD #22-11     New Sale       Strata        100\n2 01 Jan 2024           34 POLLEN PLACE     New Sale         Land        168\n3 01 Jan 2024    1 BEDOK CENTRAL #09-10     New Sale       Strata        101\n4 01 Jan 2024 18A YEW SIANG ROAD #03-12     New Sale       Strata         75\n5 01 Jan 2024      36 PINE GROVE #05-18     New Sale       Strata         74\n  Unit.Price....PSM. Nett.Price... Property.Type Number.of.Units\n1             27,269             -   Condominium               1\n2             22,917             - Terrace House               1\n3             23,228             -     Apartment               1\n4             29,200             -     Apartment               1\n5             26,405             -   Condominium               1\n                  Tenure Completion.Date Purchaser.Address.Indicator\n1 99 yrs from 28/08/2020     Uncompleted                     Private\n2 99 yrs from 09/12/2019     Uncompleted                         N.A\n3 99 yrs from 05/01/2022     Uncompleted                         HDB\n4               Freehold     Uncompleted                         N.A\n5 99 yrs from 12/09/2022     Uncompleted                     Private\n  Postal.Code Postal.District Postal.Sector   Planning.Region Planning.Area\n1      169878               3            16    Central Region        Outram\n2      807233              28            80 North East Region     Serangoon\n3      469657              16            46       East Region         Bedok\n4      118992               5            11    Central Region    Queenstown\n5      598444              21            59    Central Region   Bukit Timah\n\n\n\n2.3.1 Union Dataset\n\ncheck columnscheck data typesUnion operation\n\n\nThis code checks if the column names of the five datasets are consistent.\n\nall_colnames &lt;- c(names(files1), names(files2), names(files3), names(files4), names(files5))\nif(length(unique(all_colnames)) != length(names(files1))) {\n  stop(\"Column names are different, files need adjustment to have consistent column names.\")\n}\n\n\n\nThis code checks if the data types of the five datasets are consistent.\n\nfor(col in names(files1)) {\n  if(!all(sapply(list(files1, files2, files3, files4, files5), function(x) class(x[[col]]) == class(files1[[col]])))) {\n    stop(\"Data types are different, files need adjustment to have consistent data types.\")\n  }\n}\n\n\n\nThe five files can be merged successfully. They have consistent column names, data types, and equal row counts, making them compatible for union operation.\n\nuniondata &lt;- rbind(files1, files2, files3, files4, files5)\n\n\n\n\n\n\n2.3.2 Check Dataset\n\nCheck data structureCheck missing valuesCheck duplicates\n\n\nChecking the structure of data using str():\n\nstr(uniondata)\n\n'data.frame':   26806 obs. of  21 variables:\n $ Project.Name               : chr  \"THE REEF AT KING'S DOCK\" \"URBAN TREASURES\" \"NORTH GAIA\" \"NORTH GAIA\" ...\n $ Transacted.Price....       : chr  \"2,317,000\" \"1,823,500\" \"1,421,112\" \"1,258,112\" ...\n $ Area..SQFT.                : chr  \"882.65\" \"882.65\" \"1,076.4\" \"1,033.34\" ...\n $ Unit.Price....PSF.         : chr  \"2,625\" \"2,066\" \"1,320\" \"1,218\" ...\n $ Sale.Date                  : chr  \"01 Jan 2023\" \"02 Jan 2023\" \"02 Jan 2023\" \"02 Jan 2023\" ...\n $ Address                    : chr  \"12 HARBOURFRONT AVENUE #05-32\" \"205 JALAN EUNOS #08-02\" \"29 YISHUN CLOSE #08-10\" \"45 YISHUN CLOSE #07-42\" ...\n $ Type.of.Sale               : chr  \"New Sale\" \"New Sale\" \"New Sale\" \"New Sale\" ...\n $ Type.of.Area               : chr  \"Strata\" \"Strata\" \"Strata\" \"Strata\" ...\n $ Area..SQM.                 : chr  \"82\" \"82\" \"100\" \"96\" ...\n $ Unit.Price....PSM.         : chr  \"28,256\" \"22,238\" \"14,211\" \"13,105\" ...\n $ Nett.Price...              : chr  \"-\" \"-\" \"-\" \"-\" ...\n $ Property.Type              : chr  \"Condominium\" \"Condominium\" \"Executive Condominium\" \"Executive Condominium\" ...\n $ Number.of.Units            : int  1 1 1 1 1 1 1 1 1 1 ...\n $ Tenure                     : chr  \"99 yrs from 12/01/2021\" \"Freehold\" \"99 yrs from 15/02/2021\" \"99 yrs from 15/02/2021\" ...\n $ Completion.Date            : chr  \"Uncompleted\" \"Uncompleted\" \"Uncompleted\" \"Uncompleted\" ...\n $ Purchaser.Address.Indicator: chr  \"HDB\" \"Private\" \"HDB\" \"HDB\" ...\n $ Postal.Code                : int  97996 419535 269343 269294 797391 548742 275780 423510 126751 738086 ...\n $ Postal.District            : int  4 14 27 27 28 19 10 15 5 25 ...\n $ Postal.Sector              : int  9 41 26 26 79 54 27 42 12 73 ...\n $ Planning.Region            : chr  \"Central Region\" \"East Region\" \"North Region\" \"North Region\" ...\n $ Planning.Area              : chr  \"Bukit Merah\" \"Bedok\" \"Yishun\" \"Yishun\" ...\n\n\n\n\nusing is.na we see there are no missing values in the data\n\nfor(column_name in names(uniondata)){\nna_count&lt;- sum(is.na(uniondata[[column_name]]))\n}\nna_count\n\n[1] 0\n\n\n\n\nUsing the duplicated function, we see that there are no duplicate entries in the data.\n\nuniondata[duplicated(uniondata),]\n\n [1] Project.Name                Transacted.Price....       \n [3] Area..SQFT.                 Unit.Price....PSF.         \n [5] Sale.Date                   Address                    \n [7] Type.of.Sale                Type.of.Area               \n [9] Area..SQM.                  Unit.Price....PSM.         \n[11] Nett.Price...               Property.Type              \n[13] Number.of.Units             Tenure                     \n[15] Completion.Date             Purchaser.Address.Indicator\n[17] Postal.Code                 Postal.District            \n[19] Postal.Sector               Planning.Region            \n[21] Planning.Area              \n&lt;0 rows&gt; (or 0-length row.names)\n\n\n\n\n\n\n\n2.3.3 data set description\n\n\n\n\n\n\n\nField\nDescription\n\n\n\n\nProject.Name\nThe name of the housing project or development.\n\n\nTransacted.Price\nThe price at which the property was transacted.\n\n\nArea (SQFT)\nThe area of the property in square feet.\n\n\nUnit.Price (PSF)\nThe price per square foot of the property.\n\n\nSale.Date\nThe date on which the property was sold.\n\n\nAddress\nThe address of the property.\n\n\nType.of.Sale\nThe type of sale, e.g., resale, new sale, sub sale.\n\n\nType.of.Area\nThe type of area, e.g., built-up area, land area.\n\n\nArea (SQM)\nThe area of the property in square meters. 1SQM=10.764SQFT\n\n\nUnit.Price (PSM)\nThe price per square meter of the property.\n\n\nNett.Price\nThe final price after deductions or adjustments.\n\n\nProperty.Type\nThe type of property, e.g., condominium, landed house, HDB flat.\n\n\nNumber.of.Units\nThe number of units in the housing development.\n\n\nTenure\nThe land tenure of the property, e.g., freehold, leasehold.\n\n\nCompletion.Date\nThe date when the property construction was completed.\n\n\nPurchaser.Address.Indicator\nIt refers to the type of residence (HDB flat or private property) of the purchaser’s address as shown in the caveat, and is not indicative of whether the place of residence is owned by the purchaser. Where the information is not available, ‘N.A’ is indicated.\n\n\nPostal.Code\nThe postal code of the property.\n\n\nPostal.District\nThe postal district of the property.\n\n\nPostal.Sector\nThe postal sector of the property.\n\n\nPlanning.Region\nSingapore is divided into 5 areas called planning regions to facilitate the planning of the use and development of land for the whole of Singapore. The 5 regions are Central Region, East Region, North East Region, North Region and West Region. Each Planning Region consists of several planning areas which are further divided into sub-zones. A Development Guide Plan (DGP) is prepared for each planning area (see Development Guide Plan).\n\n\nPlanning.Area\nThe planning area where the property is located.\n\n\n\n\n\n2.3.4 Exploration of Dataset Features\nThe following code snippet is used to explore categorical data features, including counting and identifying unique values for different features. This will help us better understand the structure and content of the dataset, providing a foundation for further exploration and analysis.\n\n\ncode\nlibrary(dplyr)\n\n# Convert Type.of.Sale\nunique_type_of_sale &lt;- unique(uniondata$Type.of.Sale)\ntable_type_of_sale &lt;- table(uniondata$Type.of.Sale)\ndf_type_of_sale &lt;- data.frame(Type_of_Sale = unique_type_of_sale, Count = as.vector(table_type_of_sale))\n\n# Convert Type.of.Area\nunique_type_of_area &lt;- unique(uniondata$Type.of.Area)\ntable_type_of_area &lt;- table(uniondata$Type.of.Area)\ndf_type_of_area &lt;- data.frame(Type_of_Area = unique_type_of_area, Count = as.vector(table_type_of_area))\n\n# Convert Property.Type\nunique_property_type &lt;- unique(uniondata$Property.Type)\ntable_property_type &lt;- table(uniondata$Property.Type)\ndf_property_type &lt;- data.frame(Property_Type = unique_property_type, Count = as.vector(table_property_type))\n\n# Convert Number.of.Units\nunique_number_of_units &lt;- unique(uniondata$Number.of.Units)\ntable_number_of_units &lt;- table(uniondata$Number.of.Units)\ndf_number_of_units &lt;- data.frame(Number_of_Units = unique_number_of_units, Count = as.vector(table_number_of_units))\n\n# Convert Completion.Date\nunique_completion_date &lt;- unique(uniondata$Completion.Date)\ntable_completion_date &lt;- table(uniondata$Completion.Date)\ndf_completion_date &lt;- data.frame(Completion_Date = unique_completion_date, Count = as.vector(table_completion_date))\n\n# Convert Purchaser.Address.Indicator\nunique_purchaser_address_indicator &lt;- unique(uniondata$Purchaser.Address.Indicator)\ntable_purchaser_address_indicator &lt;- table(uniondata$Purchaser.Address.Indicator)\ndf_purchaser_address_indicator &lt;- data.frame(Purchaser_Address_Indicator = unique_purchaser_address_indicator, Count = as.vector(table_purchaser_address_indicator))\n\n# Convert Postal.District\nunique_postal_district &lt;- unique(uniondata$Postal.District)\ntable_postal_district &lt;- table(uniondata$Postal.District)\ndf_postal_district &lt;- data.frame(Postal_District = unique_postal_district, Count = as.vector(table_postal_district))\n\n# Convert Postal.Sector\nunique_postal_sector &lt;- unique(uniondata$Postal.Sector)\ntable_postal_sector &lt;- table(uniondata$Postal.Sector)\ndf_postal_sector &lt;- data.frame(Postal_Sector = unique_postal_sector, Count = as.vector(table_postal_sector))\n\n# Convert Planning.Region\nunique_planning_region &lt;- unique(uniondata$Planning.Region)\ntable_planning_region &lt;- table(uniondata$Planning.Region)\ndf_planning_region &lt;- data.frame(Planning_Region = unique_planning_region, Count = as.vector(table_planning_region))\n\n# Convert Planning.Area\nunique_planning_area &lt;- unique(uniondata$Planning.Area)\ntable_planning_area &lt;- table(uniondata$Planning.Area)\ndf_planning_area &lt;- data.frame(Planning_Area = unique_planning_area, Count = as.vector(table_planning_area))\n\n# Convert Planning.Area\nunique_Nett.Price &lt;- unique(uniondata$Nett.Price)\ntable_Nett.Price &lt;- table(uniondata$Nett.Price)\ndf_Nett.Price &lt;- data.frame(Nett.Price = unique_Nett.Price, Count = as.vector(table_Nett.Price))\n\n\n\ndf_type_of_sale\n\n  Type_of_Sale Count\n1     New Sale  8644\n2       Resale 16617\n3     Sub Sale  1545\n\ndf_type_of_area\n\n  Type_of_Area Count\n1       Strata  1570\n2         Land 25236\n\ndf_property_type\n\n          Property_Type Count\n1           Condominium 10772\n2 Executive Condominium 10643\n3         Terrace House   233\n4   Semi-Detached House  3534\n5             Apartment   524\n6        Detached House  1100\n\ndf_number_of_units\n\n  Number_of_Units Count\n1               1 26794\n2              43     5\n3               4     1\n4              60     2\n5               3     1\n6               2     1\n7              11     1\n8               7     1\n\ndf_completion_date\n\n   Completion_Date Count\n1      Uncompleted   682\n2             2022     1\n3                -     2\n4             2015     1\n5             1941     1\n6             2000     1\n7             1958     3\n8             2014     1\n9             2011     5\n10            2009     8\n11            2008     5\n12            1998     4\n13            2017     6\n14            2018     1\n15            1997     8\n16            1990     3\n17            2019     2\n18            2010     5\n19            2003     4\n20            2016     4\n21            1999     4\n22            2001    12\n23            1995    10\n24            2007     4\n25            1994     5\n26            2012     2\n27            1991    13\n28            1976    11\n29            2006    10\n30            2005    52\n31            1996    56\n32            2002    42\n33            2013    70\n34            1967    30\n35            2021    37\n36            2004    51\n37            1980    26\n38            1986    60\n39            1983    55\n40            1977    85\n41            1993    95\n42            1988    20\n43            1978    20\n44            2020    40\n45            1975    58\n46            1992    48\n47            2023    85\n48            1982    84\n49            1989   193\n50            1981   148\n51            1979   236\n52            1954   433\n53            1985   424\n54            1984   461\n55            1973   485\n56            1968   192\n57            1972   245\n58            1964   265\n59            1955   419\n60            1961   355\n61            1970   196\n62            1956   226\n63            1957   367\n64            1969   376\n65            1952   398\n66            1987   522\n67            1974   419\n68            1963   702\n69            1960  1247\n70            1962  1172\n71            1931  1440\n72            0216  1293\n73            1965  1287\n74            1966   457\n75            1951   173\n76            2024   344\n77            1971   712\n78            1953  1032\n79            1940     3\n80            1959  8752\n\ndf_purchaser_address_indicator\n\n  Purchaser_Address_Indicator Count\n1                         HDB  8719\n2                     Private  2733\n3                         N.A 15354\n\ndf_postal_district\n\n   Postal_District Count\n1                4   181\n2               14   295\n3               27   875\n4               28   338\n5               19  1195\n6               10     9\n7               15   303\n8                5   277\n9               25  1003\n10              18  1682\n11               8   826\n12               9   548\n13              11   567\n14              16   940\n15               1  2763\n16              20   998\n17              22   357\n18               3  1480\n19              23  2920\n20               7   696\n21              21  1449\n22              17   899\n23              12  2662\n24              13    18\n25               6   322\n26               2  1365\n27              24  1270\n28              26   568\n\ndf_postal_sector\n\n   Postal_Sector Count\n1              9   112\n2             41     9\n3             26    60\n4             79   219\n5             54    76\n6             27   286\n7             42    52\n8             12   267\n9             73   593\n10            43   335\n11            53   248\n12            52   241\n13            45   386\n14            21     9\n15            22   244\n16            30    59\n17            82   115\n18            76   162\n19            46   584\n20             1   419\n21            48   390\n22            57   415\n23            64   421\n24            51   458\n25            14   249\n26            67    66\n27            75   511\n28            66    91\n29            25   381\n30            18    76\n31            55    97\n32            59   347\n33            47   123\n34            50   246\n35            32   269\n36            65   152\n37            13   273\n38            68   459\n39            39  1962\n40            24   155\n41            23   187\n42            35   704\n43            58   157\n44            17   137\n45            36     3\n46            56   354\n47            44   478\n48            15  1002\n49            38  1205\n50            40   827\n51            16   435\n52            28   139\n53             7   557\n54            20   879\n55            80   570\n56            33   423\n57            69   141\n58            29     3\n59            19   332\n60             8   861\n61            61   413\n62            34   817\n63             6   571\n64            31    18\n65            60   322\n66            11   212\n67            78  1056\n68            77    17\n69            10  1348\n70             5   324\n71            63   244\n72            49   453\n\ndf_planning_region\n\n    Planning_Region Count\n1    Central Region 12200\n2       East Region  3644\n3      North Region  5037\n4 North East Region  1625\n5       West Region  4300\n\ndf_planning_area\n\n      Planning_Area Count\n1       Bukit Merah  1558\n2             Bedok  1753\n3            Yishun   460\n4          Sengkang  1314\n5           Hougang   610\n6       Bukit Timah   828\n7     Marine Parade  2344\n8          Clementi     3\n9         Woodlands   594\n10        Serangoon   647\n11          Tanglin   587\n12         Tampines  1227\n13          Kallang  1209\n14           Rochor   531\n15           Novena   368\n16          Punggol   681\n17        Sembawang    25\n18    Downtown Core  1551\n19           Bishan    65\n20      Jurong West   348\n21        Pasir Ris   931\n22       Queenstown   102\n23    Bukit Panjang   251\n24      Bukit Batok   832\n25           Museum     1\n26           Newton   453\n27 Southern Islands   945\n28        Toa Payoh   374\n29    Choa Chu Kang   209\n30          Geylang   502\n31     River Valley   836\n32          Orchard   981\n33  Singapore River   140\n34           Outram   106\n35           Tengah     2\n36       Ang Mo Kio  1055\n37      Jurong East   612\n38           Mandai    18\n39     Sungei Kadut   657\n40         Changi     320\n41       Paya Lebar   776\n\ndf_Nett.Price\n\n   Nett.Price Count\n1           - 26770\n2   2,129,200     1\n3   2,018,062     1\n4   2,224,300     1\n5   1,752,240     1\n6   2,289,600     1\n7   2,307,600     1\n8   2,325,600     1\n9   2,397,600     1\n10  2,433,600     1\n11  2,451,600     1\n12  3,960,900     1\n13  1,506,600     1\n14  3,987,900     1\n15  2,335,888     1\n16  2,343,600     1\n17  3,697,000     1\n18  3,180,900     1\n19  1,941,900     1\n20  2,137,192     1\n21  3,050,000     1\n22  3,445,100     1\n23  1,935,070     1\n24  1,606,400     1\n25 11,712,000     1\n26 14,212,000     1\n27  2,040,900     1\n28 14,463,000     1\n29 14,358,000     1\n30  1,950,000     1\n31 14,124,000     1\n32 12,203,000     1\n33  1,990,000     1\n34  1,558,579     1\n35 11,795,000     1\n36  1,628,000     1\n37  1,492,600     1\n\n\nBefore diving into detailed data exploration, it’s essential to understand the key numerical variables in our dataset. The summary() function provides a concise summary of these variables, including measures of central tendency, dispersion, and distribution.\n\nsummary(uniondata$Transacted.Price....)\n\n   Length     Class      Mode \n    26806 character character \n\nsummary(uniondata$Unit.Price....PSF.)\n\n   Length     Class      Mode \n    26806 character character \n\nsummary(uniondata$Area..SQFT.)\n\n   Length     Class      Mode \n    26806 character character \n\n\n\n\n\n\n\n\nNote\n\n\n\nSummary of the Dateset findings:\n\nUpon examining the data’s structure, missing values, and duplicates, it appears that the data is tidy and does not require further processing.\nThe information contained in the “Project.Name” and “Address” columns appears overly intricate and does not significantly contribute to the analysis. Therefore, these columns can be safely removed.\nBoth “SQM” and “SQFT” serve as units of measurement for area. It suffices to retain one of them for analysis purposes.\nThe “Tenure” information can be simplified by retaining only the duration in years and removing the specific date portion, facilitating clearer analysis.\nGiven considerations for visualization, the “Postal” information is redundant. It is suggested to eliminate the “Postal.Sector” column.\nAnomalies such as the presence of values like 60 and 43 in the “Number of Units” column warrant further investigation to ascertain whether they are indeed outliers or erroneous entries.\nUpon inspecting the “Nett.Price” column, it is observed that only 27 rows contain specific numerical values, while the rest are empty. Hence, this feature proves ineffective and can be safely discarded.\n\nThis concise summary encapsulates the key findings of the EDA process, laying the groundwork for further analysis and decision-making."
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#recast-variable",
    "href": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#recast-variable",
    "title": "Takehome_ex01",
    "section": "3.1 Recast variable",
    "text": "3.1 Recast variable\nTransacted.Price….,Transacted.Price….,Area..SQFT. are of type chr,As they should be numeric, they will be cast as num class.\n\n# Remove commas and convert to numeric\nuniondata$Transacted.Price.... &lt;- as.numeric(gsub(\",\", \"\", uniondata$Transacted.Price....))\nuniondata$Area..SQFT. &lt;- as.numeric(gsub(\",\", \"\", uniondata$Area..SQFT.))\nuniondata$Unit.Price....PSF. &lt;- as.numeric(gsub(\",\", \"\", uniondata$Unit.Price....PSF.))"
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#create-new-variables",
    "href": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#create-new-variables",
    "title": "Takehome_ex01",
    "section": "3.2 Create new variables",
    "text": "3.2 Create new variables\nFrom the original Tenure column, extracting the numeric part, removing non-numeric characters, and classifying based on the extracted numeric values.\n\nuniondata &lt;- uniondata %&gt;%\n  mutate(\n    Tenure_cleaned = gsub(\"[^0-9]\", \"\", Tenure),\n    Tenure_numeric = as.numeric(substr(Tenure_cleaned, 1, 3)),\n    Tenure_level = case_when(\n      grepl(\"Freehold\", Tenure) ~ \"Freehold\",\n      Tenure_numeric &lt; 200 ~ \"&lt; 200\",\n      TRUE ~ \"&gt; 200\"\n    )\n  )\nunique(uniondata$Tenure_level)\n\n[1] \"&gt; 200\"    \"Freehold\" \"&lt; 200\""
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#segmenting-variables-into-groups",
    "href": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#segmenting-variables-into-groups",
    "title": "Takehome_ex01",
    "section": "3.3 Segmenting Variables into Groups",
    "text": "3.3 Segmenting Variables into Groups\nCreates boxplots with summary statistics, aiming to understand the distribution and characteristics of these variables visually.\n\nfilter_area &lt;- uniondata %&gt;% \n  filter(Area..SQFT. &lt; 5000)\n\nlibrary(ggplot2)\nlibrary(patchwork)\n\n# Calculate summary statistics for Area..SQFT.\nmean_val &lt;- mean(filter_area$`Area..SQFT.`)\nmedian_val &lt;- median(filter_area$`Area..SQFT.`)\nq1_val &lt;- quantile(filter_area$`Area..SQFT.`, 0.25)\nq3_val &lt;- quantile(filter_area$`Area..SQFT.`, 0.75)\n\n# Create boxplot for Area..SQFT.\np1 &lt;- ggplot(filter_area, aes(x = \"\", y = `Area..SQFT.`)) +\n  geom_boxplot(fill = \"#1a80bb\") +  # Fill boxplot with color\n  stat_summary(fun = \"mean\", geom = \"point\", shape = 8,\n               size = 2, color = \"#fefefe\") +\n  annotate(\"text\", x = 0.8, y = max(filter_area$`Area..SQFT.`), \n           label = paste(\"Mean:\", round(mean_val, 2), \"\\n\",\n                         \"Median:\", round(median_val, 2), \"\\n\",\n                         \"Q1:\", round(q1_val, 2), \"\\n\",\n                         \"Q3:\", round(q3_val, 2)), \n           vjust = 1, hjust = 0.5, size = 3) +\n  labs(y = \"Area (SQFT)\", x=\"\",title = \"Boxplot of Area (SQFT)\") +\n  theme_minimal()+\n  theme( text = element_text(size = 8))\n\n# Calculate summary statistics for Unit.Price....PSF.\nmean_val_psf &lt;- mean(uniondata$`Unit.Price....PSF.`)\nmedian_val_psf &lt;- median(uniondata$`Unit.Price....PSF.`)\nq1_val_psf &lt;- quantile(uniondata$`Unit.Price....PSF.`, 0.25)\nq3_val_psf &lt;- quantile(uniondata$`Unit.Price....PSF.`, 0.75)\n\n# Create boxplot for Unit.Price....PSF.\np2 &lt;- ggplot(uniondata, aes(x = \"\", y = `Unit.Price....PSF.`)) +\n  geom_boxplot(fill = \"#1a80bb\") +  # Fill boxplot with color\n  stat_summary(fun = \"mean\", geom = \"point\", shape = 8,\n               size = 2, color = \"#fefefe\") +\n  annotate(\"text\", x = 0.8, y = max(uniondata$`Unit.Price....PSF.`), \n           label = paste(\"Mean:\", round(mean_val_psf, 2), \"\\n\",\n                         \"Median:\", round(median_val_psf, 2), \"\\n\",\n                         \"Q1:\", round(q1_val_psf, 2), \"\\n\",\n                         \"Q3:\", round(q3_val_psf, 2)), \n           vjust = 1, hjust = 0.5, size = 3) +\n  labs(y = \"Price (PSF)\", x=\"\", title = \"Boxplot of Price (PSF)\") +\n  theme_minimal()+\n  theme( text = element_text(size = 8))\n\n# Combine the plots\n(p1 + p2)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBased on the boxplot results, the Area and Price need to be grouped.\nThey are divided into four groups: Small, Medium, Large, and plus, based on the first quartile (Q1), median, third quartile (Q3), and outliers (values beyond 1.5 times the interquartile range, IQR).\nThese groupings help categorize the data into different size categories, providing insights into the distribution and variability of the Area and Price variables.\n\n\n\n# Grouping the Area variable\nuniondata$Area_Group &lt;- cut(uniondata$`Area..SQFT.`, \n                            breaks = c(-Inf, quantile(uniondata$`Area..SQFT.`, 0.25),\n                                       quantile(uniondata$`Area..SQFT.`, 0.5),\n                                       quantile(uniondata$`Area..SQFT.`, 0.75),\n                                       Inf),\n                            labels = c(\"Small\", \"Medium\", \"Large\", \"Plus\"))\n\n# Grouping the Price variable\nuniondata$Price_Group &lt;- cut(uniondata$`Unit.Price....PSF.`, \n                             breaks = c(-Inf, quantile(uniondata$`Unit.Price....PSF.`, 0.25),\n                                        quantile(uniondata$`Unit.Price....PSF.`, 0.5),\n                                        quantile(uniondata$`Unit.Price....PSF.`, 0.75),\n                                        Inf),\n                             labels = c(\"Low\", \"Medium-Low\", \"Medium-High\", \"High\"))"
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#deciding-on-plausible-values-to-use",
    "href": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#deciding-on-plausible-values-to-use",
    "title": "Takehome_ex01",
    "section": "3.4 Deciding on Plausible Values to Use",
    "text": "3.4 Deciding on Plausible Values to Use\nThrough exploring the dataset in the previous step, removing irrelevant or redundant columns can facilitate the subsequent analysis. Additionally, the analysis of the dataset is limited to the first quarter of 2024.\n\nuniondata$Sale.Date &lt;- dmy(uniondata$Sale.Date)\ncols_to_exclude &lt;- c(\"Project.Name\", \"Nett.Price...\", \"Address\", \"Area..SQM.\",\"Unit.Price....PSM.\",\"Postal.Code\",\"Postal.Sector\",\"Tenure_cleaned\",\"Tenure_numeric\",\"Tenure\")\n\ndata2024 &lt;- uniondata %&gt;%\n  select(-any_of(cols_to_exclude))\nhead(data2024)\n\n  Transacted.Price.... Area..SQFT. Unit.Price....PSF.  Sale.Date Type.of.Sale\n1              2317000      882.65               2625 2023-01-01     New Sale\n2              1823500      882.65               2066 2023-01-02     New Sale\n3              1421112     1076.40               1320 2023-01-02     New Sale\n4              1258112     1033.34               1218 2023-01-02     New Sale\n5              1280000      871.88               1468 2023-01-03       Resale\n6              5870000     3322.85               1767 2023-01-03       Resale\n  Type.of.Area         Property.Type Number.of.Units Completion.Date\n1       Strata           Condominium               1     Uncompleted\n2       Strata           Condominium               1     Uncompleted\n3       Strata Executive Condominium               1     Uncompleted\n4       Strata Executive Condominium               1     Uncompleted\n5       Strata           Condominium               1            2022\n6         Land         Terrace House               1               -\n  Purchaser.Address.Indicator Postal.District   Planning.Region Planning.Area\n1                         HDB               4    Central Region   Bukit Merah\n2                     Private              14       East Region         Bedok\n3                         HDB              27      North Region        Yishun\n4                         HDB              27      North Region        Yishun\n5                         HDB              28 North East Region      Sengkang\n6                     Private              19 North East Region       Hougang\n  Tenure_level Area_Group Price_Group\n1        &gt; 200     Medium        High\n2     Freehold     Medium Medium-High\n3        &gt; 200      Large         Low\n4        &gt; 200      Large         Low\n5        &gt; 200     Medium  Medium-Low\n6        &gt; 200       Plus Medium-High\n\nstr(data2024\n    )\n\n'data.frame':   26806 obs. of  16 variables:\n $ Transacted.Price....       : num  2317000 1823500 1421112 1258112 1280000 ...\n $ Area..SQFT.                : num  883 883 1076 1033 872 ...\n $ Unit.Price....PSF.         : num  2625 2066 1320 1218 1468 ...\n $ Sale.Date                  : Date, format: \"2023-01-01\" \"2023-01-02\" ...\n $ Type.of.Sale               : chr  \"New Sale\" \"New Sale\" \"New Sale\" \"New Sale\" ...\n $ Type.of.Area               : chr  \"Strata\" \"Strata\" \"Strata\" \"Strata\" ...\n $ Property.Type              : chr  \"Condominium\" \"Condominium\" \"Executive Condominium\" \"Executive Condominium\" ...\n $ Number.of.Units            : int  1 1 1 1 1 1 1 1 1 1 ...\n $ Completion.Date            : chr  \"Uncompleted\" \"Uncompleted\" \"Uncompleted\" \"Uncompleted\" ...\n $ Purchaser.Address.Indicator: chr  \"HDB\" \"Private\" \"HDB\" \"HDB\" ...\n $ Postal.District            : int  4 14 27 27 28 19 10 15 5 25 ...\n $ Planning.Region            : chr  \"Central Region\" \"East Region\" \"North Region\" \"North Region\" ...\n $ Planning.Area              : chr  \"Bukit Merah\" \"Bedok\" \"Yishun\" \"Yishun\" ...\n $ Tenure_level               : chr  \"&gt; 200\" \"Freehold\" \"&gt; 200\" \"&gt; 200\" ...\n $ Area_Group                 : Factor w/ 4 levels \"Small\",\"Medium\",..: 2 2 3 3 2 4 4 4 1 4 ...\n $ Price_Group                : Factor w/ 4 levels \"Low\",\"Medium-Low\",..: 4 3 1 1 2 3 1 3 3 1 ..."
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#eda1-real-estate-market-trend-analysis",
    "href": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#eda1-real-estate-market-trend-analysis",
    "title": "Takehome_ex01",
    "section": "4.1 EDA1 Real Estate Market Trend Analysis",
    "text": "4.1 EDA1 Real Estate Market Trend Analysis\n\nThe PlotThe Code Chunck\n\n\n\n\n`summarise()` has grouped output by 'ym'. You can override using the `.groups`\nargument.\n`summarise()` has grouped output by 'Date'. You can override using the\n`.groups` argument.\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\n\n\n\n\n\n\n\nlibrary(tidyverse)\n\n# Group data by month and year, calculate average house price\ndf_avg &lt;- uniondata %&gt;%\n  filter(Purchaser.Address.Indicator != \"N.A\") %&gt;%\n  mutate(ym = format(Sale.Date, \"%Y-%m\")) %&gt;%\n  group_by(ym, Purchaser.Address.Indicator) %&gt;%\n  summarise(avg_price = mean(Transacted.Price....))\n\n# Plot 1\nplot1 &lt;- ggplot(df_avg, aes(x = ym, y = avg_price, fill = Purchaser.Address.Indicator)) +\n  geom_col(position = position_dodge()) +\n  scale_fill_manual(values =  c(\"#082a54\", \"#f0c571\"), name = \"Property type\") +\n  geom_hline(yintercept = mean(df_avg$avg_price), color = \"red\", linetype = \"dashed\") +  \n  geom_text(aes(x = 1, y = mean(df_avg$avg_price), \n                label = paste(\"Avg Price:\", round(mean(df_avg$avg_price), 2))), \n                color = \"red\", size = 3, hjust = -0.2, vjust = -0.5) + \n  labs(x = \"Month\", y = \"Price(PSF)\", title = \"Price (PSF) of HDB by Property type and Month\") + \n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = \"none\",\n        text = element_text(size = 8))\n\n\n# Count sales by month and property type\ndf_count &lt;- uniondata %&gt;%\n  mutate(Date = format(Sale.Date, \"%Y-%m\")) %&gt;%\n  filter(Purchaser.Address.Indicator != \"N.A\") %&gt;%\n  group_by(Date, Purchaser.Address.Indicator) %&gt;%\n  summarise(Sales = n()) %&gt;%\n  group_by(Date) %&gt;%\n  mutate(Percentage = Sales / sum(Sales))\n\n# Plot 2\nplot2 &lt;- ggplot(df_count, aes(x = Date, y = Sales, fill = Purchaser.Address.Indicator)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = scales::percent(Percentage, accuracy = 1)), \n            position = position_stack(vjust = 0.5), \n            size = 3, \n            color = \"#4A5859\") + \n  scale_fill_manual(values =  c(\"#1a80bb\", \"#f2c45f\"), name = \"Property type\") +\n  labs(x = \"Month\", y = \"Sales\", title = \"Monthly Sales by Property type\") +\n  theme_classic() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1), \n        legend.position = c(0.8, 0.9), legend.title = element_blank(), \n        legend.key.size = unit(0.4, 'cm'), legend.key.height = unit(0.4, 'cm'), \n        legend.key.width = unit(0.4, 'cm'), text = element_text(size = 8)) \n\n# Combine plots\n  plot1 + plot2\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBased on the provided charts, we ca analyze the recent price trends and sales situation in different types of properties as follow:\nPrice Trends:\n\nPrices for public housing (HDB) have remained stable, averaging between 1700 to 1800 SGD per square foot monthly. In contrast, private real estate prices fluctuate more and are consistently higher than HDB prices.\nThe long-term average price for HDB units is lower than the overall average, reflecting its affordability and welfare nature.\nPrices in the first quarter of 2024 have decreased compared to 2023, especially for private real estate.\n\nSales Situation:\n\nMonthly sales volumes for both HDB and private real estate maintain a ratio of around 60% to 40%, showing stable market demand.\nThe surge in HDB sales volume in 2023 has returned to normal levels in the first quarter of 2024.\nDespite fluctuations, HDB sales consistently account for around 60% of total sales, highlighting its importance in meeting housing needs."
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#eda2-price-distribution-of-housing-in-five-regions-of-singapore",
    "href": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#eda2-price-distribution-of-housing-in-five-regions-of-singapore",
    "title": "Takehome_ex01",
    "section": "4.2 EDA2 Price Distribution of Housing in Five Regions of Singapore",
    "text": "4.2 EDA2 Price Distribution of Housing in Five Regions of Singapore\n\nThe PlotThe Code Chunck\n\n\n\n\n$x\n[1] \"Region\"\n\n$y\n[1] \"Price(PSF)\"\n\nattr(,\"class\")\n[1] \"labels\"\n\n\nPicking joint bandwidth of 60.4\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(ggridges)\n\n# Calculate median values\nmedian_values &lt;- data2024 %&gt;%\n  group_by(Planning.Region) %&gt;%\n  summarise(median_value = median(Unit.Price....PSF.))\n\n# Recode Planning.Region\ndata2024 &lt;- data2024 %&gt;%\n  mutate(Planning.Region = recode(Planning.Region, \n                                  \"Central Region\" = \"Central\",\n                                  \"East Region\" = \"East\",\n                                  \"North Region\" = \"North\",\n                                  \"North East Region\" = \"North East\",\n                                  \"West Region\" = \"West\"\n                                  ))\n\n# Plot 1\nPlot1 &lt;- ggplot(data2024, aes(Unit.Price....PSF., Planning.Region)) +\n  geom_density_ridges(aes(fill = Planning.Region), alpha = 0.2, quantile_lines = TRUE, quantile_fun = function(x, ...) median(x)) +\n  geom_text(data = median_values, aes(x = median_value - 200, y = Planning.Region, label = paste(\"Median Value:\", round(median_value, 2))),\n            hjust = -0.2, vjust = -0.5, color = \"black\", size = 3) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\",\n        text = element_text(size = 8),\n        plot.title = element_text(size = 12, face = \"bold\"),\n        legend.title = element_blank(),\n        legend.key.size = unit(0.4, 'cm'), \n        legend.key.height = unit(0.4, 'cm'), \n        legend.key.width = unit(0.4, 'cm')) +\n  labs(x = \"Price(PSF)\", y = \"Region\", title = \"Unit Price Distribution by Region\")\n\n# Plot 2\nPlot2 &lt;- data2024 %&gt;% \n  filter(Purchaser.Address.Indicator != \"N.A\") %&gt;% \n  ggplot(aes(Planning.Region, Unit.Price....PSF., fill = Purchaser.Address.Indicator)) +\n  geom_boxplot() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"bottom\",\n        text = element_text(size = 8),\n        legend.title = element_blank()) +\n  labs(x = \"Region\", y = \"Price(PSF)\")\n\n# Combine plots\nPlot1 + Plot2\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBased on the chart, we can analyze the price distribution of housing in the five regions of Singapore and different types of properties as follows:\n\nThe median price in the Central region is the highest at $2,224 per square foot, while the West region has the lowest median price at $1,529 per square foot. This may reflect the high-end positioning and high demand for properties in the city center.\nThe price distribution follows a normal distribution curve, but the peak and spread of each region’s distribution vary. The curves for the Central and West regions are steeper, indicating that prices are more concentrated in these areas, while those for the Northeast, North, and East regions are flatter, indicating greater price variation.\nThe box plots show significant price variations within each region, especially in the Northeast and West regions, where the price dispersion is the highest.\nPrivate properties generally have higher prices than public housing (HDB), especially in the West and North regions, where the price gap between the two types of properties is significant. This aligns with the independent ownership and higher positioning of private properties.\nEven within the same region, there are significant price differences between private properties and HDB flats, reflecting the diverse nature of the Singapore real estate market."
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#eda3-comparison-of-unit-price-and-area-for-different-property-types-in-singapore",
    "href": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#eda3-comparison-of-unit-price-and-area-for-different-property-types-in-singapore",
    "title": "Takehome_ex01",
    "section": "4.3 EDA3 Comparison of Unit Price and Area for Different Property Types in Singapore",
    "text": "4.3 EDA3 Comparison of Unit Price and Area for Different Property Types in Singapore\n\nThe PlotThe Code Chunk\n\n\n\n\n`summarise()` has grouped output by 'Purchaser.Address.Indicator'. You can\noverride using the `.groups` argument.\nAttaching package: 'scales'\nThe following object is masked from 'package:purrr':\n\ndiscard\nThe following object is masked from 'package:readr':\n\ncol_factor\n\n\n\n\n\n\n\n\ndf_Typeprice &lt;- uniondata %&gt;%\n  filter(Purchaser.Address.Indicator !=\"N.A\") %&gt;% \n  group_by(Purchaser.Address.Indicator, Property.Type) %&gt;%\n  summarise(Price = median(Unit.Price....PSF.),Area=median( Area..SQFT.))\n# Loading required packages\n\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(ggrepel)\n\n# Plot\n# Plot\nggplot(df_Typeprice, aes(x = Area, y = Price)) +\n  geom_point(aes(size = Price, color = Purchaser.Address.Indicator), alpha = 0.6) +\n  geom_text_repel(aes(label = Property.Type), size = 2.5) +\n  scale_color_manual(values = c(\"#C83E4D\", \"#4A5859\"), name = \"Property Type\") +  # Change legend title\n  labs(title = \"Comparison of Area and Unit Price by Property Type\", x = \"Area\", y = \"Price (PSF)\") +  # Change axis labels\n  theme(text = element_text(size = 10), \n        plot.title = element_text(size = 12, face = \"bold\"),\n        legend.key.size = unit(0.5, 'cm'), \n        legend.key.height = unit(0.5, 'cm'), \n        legend.key.width = unit(0.5, 'cm'),\n        legend.title = element_text(size = 8))  \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBased on the chart data, we can can analyze the unit area prices and sizes for different types of properties as follows:\n\nPrivate properties have higher prices than public housing (HDB), reflecting their nature and market positioning.\nThere are significant price differences among different types of private properties, with detached houses being the highest priced and condominiums being relatively lower.\nPublic housing (HDB) shows less variation in prices across different types, reflecting uniform price control and affordability.\nDetached and semi-detached houses generally have larger sizes, while apartments and condominiums have smaller sizes.\nExecutive condominiums have the lowest unit area prices among different types of apartments, likely due to their mixed characteristics of private apartments and affordable housing."
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#eda4-regional-deviation-in-unit-prices-across-singapore",
    "href": "Takehome_Ex/TakeHome Ex01/Takehomeex01.html#eda4-regional-deviation-in-unit-prices-across-singapore",
    "title": "Takehome_ex01",
    "section": "4.4 EDA4 Regional Deviation in Unit Prices Across Singapore",
    "text": "4.4 EDA4 Regional Deviation in Unit Prices Across Singapore\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\n\n# Private\ndf_Aavg &lt;- uniondata %&gt;%\n  filter(Purchaser.Address.Indicator == \"Private\") %&gt;%\n  group_by(Planning.Area) %&gt;%\n  summarise(avg_Aprice = mean(Unit.Price....PSF.))\n\ndf_Aavg$p_z &lt;- round((df_Aavg$avg_Aprice - mean(df_Aavg$avg_Aprice)) / sd(df_Aavg$avg_Aprice), 2)\ndf_Aavg$p_ztype &lt;- ifelse(df_Aavg$p_z &lt; 0, \"below\", \"above\")\ndf_Aavg &lt;- df_Aavg[order(df_Aavg$p_z), ]\n\ndf_Aavg$Planning.Area &lt;- factor(df_Aavg$Planning.Area, levels = df_Aavg$Planning.Area)\n\nplot11 &lt;- ggplot(df_Aavg, aes(x = Planning.Area, y = p_z, label = p_z)) +\n  geom_bar(stat = \"identity\", aes(fill = p_ztype), position = position_dodge2(width = 2), width = 0.8) +\n  scale_fill_manual(name = \"Average Price\", labels = c(\"Above Average\", \"Below Average\"), values = c(\"below\" = \"#C83E4D\", \"above\" = \"#4A5859\")) +\n  labs(title = \"Unit Price Deviations by Area\", y = \"\", subtitle = \"Private\") +\n  coord_flip() +\n  theme(legend.position = \"None\", text = element_text(size = 8), plot.title = element_text(size = 12, face = \"bold\"))\n\n# HDB\ndf_AHavg &lt;- uniondata %&gt;%\n  filter(Purchaser.Address.Indicator == \"HDB\") %&gt;%\n  group_by(Planning.Area) %&gt;%\n  summarise(avg_Aprice = mean(Unit.Price....PSF.))\n\ndf_AHavg$p_z &lt;- round((df_AHavg$avg_Aprice - mean(df_AHavg$avg_Aprice)) / sd(df_AHavg$avg_Aprice), 2)\ndf_AHavg$p_ztype &lt;- ifelse(df_AHavg$p_z &lt; 0, \"below\", \"above\")\ndf_AHavg &lt;- df_AHavg[order(df_AHavg$p_z), ]\n\ndf_AHavg$Planning.Area &lt;- factor(df_AHavg$Planning.Area, levels = df_AHavg$Planning.Area)\n\nplot22 &lt;- ggplot(df_AHavg, aes(x = Planning.Area, y = p_z, label = p_z)) +\n  geom_bar(stat = \"identity\", aes(fill = p_ztype), position = position_dodge2(width = 2), width = 0.8) +\n  scale_fill_manual(name = \"Average Price\", labels = c(\"Above Average\", \"Below Average\"), values = c(\"below\" = \"#C83E4D\", \"above\" = \"#4A5859\")) +\n  labs(y = \"\", x = \"\", subtitle = \"HDB\") +\n  coord_flip() +\n  theme(text = element_text(size = 8),\n        legend.title = element_blank(),\n        legend.position = c(0.25, 0.9),\n        legend.key.size = unit(0.4, 'cm'),\n        legend.key.height = unit(0.4, 'cm'),\n        legend.key.width = unit(0.4, 'cm'))\n\nplot11 + plot22\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBased on this chart, we can analyze the deviation of unit housing prices in different regions of Singapore:\nPrivate Properties:\n\nPrivate property prices in Chinatown, Newton, and Orchard Road areas are significantly higher than the average, with the highest deviations. These areas have prime locations, which may be the primary reason.\nSuburban areas such as Bukit Panjang, Serangoon, Balestier, and Bedok have private property prices below the average.\n\nHDB Flats:\n\nHDB flat prices in River Valley, Chinatown, and Newton areas are higher than the average, as these areas are close to the city center, which may be the main influencing factor.\nSuburban areas such as Balestier, Serangoon, Bedok, and Choa Chu Kang have HDB flat prices generally below the average."
  },
  {
    "objectID": "InClass_Ex/In class6/In-class_Ex06a.html",
    "href": "InClass_Ex/In class6/In-class_Ex06a.html",
    "title": "In-class Exercise 6",
    "section": "",
    "text": "pacman::p_load(tidyverse, readtext, corporaexplorer,\n               quanteda, stringi, stringr, rvest, tidytext)"
  },
  {
    "objectID": "InClass_Ex/In class6/In-class_Ex06a.html#loading-r-packages",
    "href": "InClass_Ex/In class6/In-class_Ex06a.html#loading-r-packages",
    "title": "In-class Exercise 6",
    "section": "",
    "text": "pacman::p_load(tidyverse, readtext, corporaexplorer,\n               quanteda, stringi, stringr, rvest, tidytext)"
  },
  {
    "objectID": "InClass_Ex/In class6/In-class_Ex06a.html#loading-the-data",
    "href": "InClass_Ex/In class6/In-class_Ex06a.html#loading-the-data",
    "title": "In-class Exercise 6",
    "section": "6.2 Loading the data",
    "text": "6.2 Loading the data\n\nbible &lt;- readr::read_lines(\"http://www.gutenberg.org/cache/epub/10/pg10.txt\")\n\nthe data is a text file; a plain text from a website"
  },
  {
    "objectID": "InClass_Ex/In class6/In-class_Ex06a.html#pre-processing-the-text",
    "href": "InClass_Ex/In class6/In-class_Ex06a.html#pre-processing-the-text",
    "title": "In-class Exercise 6",
    "section": "6.3 Pre-processing the text",
    "text": "6.3 Pre-processing the text\n\nbible &lt;- paste(bible, collapse = \"\\n\")\n\n\nstart_v &lt;- stri_locate_first_fixed(bible, \"The First Book of Moses: Called Genesis\")[1]\nend_v &lt;- stri_locate_last_fixed(bible, \"Amen.\")[2]\nbible &lt;- stri_sub(bible, start_v, end_v)\n\n\nbooks &lt;- stri_split_regex(bible, \"\\n{5}\") %&gt;%\n    unlist %&gt;%\n    .[-40] # Removing the heading \"The New Testament of the King James Bible\",\n              # which also was preceded by five newlines.\n\n\nbooks &lt;- str_replace_all(books, \"\\n{2,}\", \"NEW_PARAGRAPH\") %&gt;%\n    str_replace_all(\"\\n\", \" \") %&gt;%\n    str_replace_all(\"NEW_PARAGRAPH\", \"\\n\\n\")\nbooks &lt;- books[3:68]  # The two first elements are not books\n\n\nchapters &lt;- str_replace_all(books, \"(\\\\d+:1 )\", \"NEW_CHAPTER\\\\1\") %&gt;%\n    stri_split_regex(\"NEW_CHAPTER\")\n\n\nchapters &lt;- lapply(chapters, function(x) x[-1])"
  },
  {
    "objectID": "InClass_Ex/In class6/In-class_Ex06a.html#metadata",
    "href": "InClass_Ex/In class6/In-class_Ex06a.html#metadata",
    "title": "In-class Exercise 6",
    "section": "6.4 Metadata",
    "text": "6.4 Metadata\n\nbook_titles &lt;- read_html(\"https://www.esv.org/resources/esv-global-study-bible/list-of-abbreviations\") %&gt;%\n  html_nodes(\"td:nth-child(1)\") %&gt;%\n  html_text() %&gt;%\n  .[13:78]  # Removing irrelevant elements after manual inspection.\n\n\n# We add a column indicating whether a book belongs to the Old or New Testament,\n#   knowing that they contain respectively 39 and 27 books.\ntestament &lt;- c(rep(\"Old\", 39), rep(\"New\", 27))"
  },
  {
    "objectID": "InClass_Ex/In class6/In-class_Ex06a.html#creating-data-frame-with-text-and-metadata",
    "href": "InClass_Ex/In class6/In-class_Ex06a.html#creating-data-frame-with-text-and-metadata",
    "title": "In-class Exercise 6",
    "section": "6.5 Creating data frame with text and metadata",
    "text": "6.5 Creating data frame with text and metadata\n\n# Data frame with one book as one row.\nbible_df &lt;- tibble::tibble(Text = chapters,\n                           Book = book_titles,\n                           Testament = testament)\n\n\n# We want each chapter to be one row, but keep the metadata (book and which testament).\nbible_df &lt;- tidyr::unnest(bible_df, Text)"
  },
  {
    "objectID": "InClass_Ex/In class6/In-class_Ex06a.html#using-corporaexplorer",
    "href": "InClass_Ex/In class6/In-class_Ex06a.html#using-corporaexplorer",
    "title": "In-class Exercise 6",
    "section": "6.6 Using corporaexplorer",
    "text": "6.6 Using corporaexplorer\n\nKJB &lt;- prepare_data(dataset = bible_df,\n                    date_based_corpus = FALSE,\n                    grouping_variable = \"Book\",\n                    columns_doc_info =\nc(\"Testament\", \"Book\"))  #that helps group together the one that we are extracting\n# a unique object class is created that R Studio can read\n\n\nclass(KJB) #to check that the object class is created properly since it is specially catered to corpora explorer\n\n[1] \"corporaexplorerobject\""
  },
  {
    "objectID": "InClass_Ex/In class2/In-class_Ex02.html",
    "href": "InClass_Ex/In class2/In-class_Ex02.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "pacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\n\nexam &lt;- read_csv(\"Data/Exam_data.csv\")"
  },
  {
    "objectID": "InClass_Ex/In class2/In-class_Ex02.html#getting-started",
    "href": "InClass_Ex/In class2/In-class_Ex02.html#getting-started",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "pacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\n\nexam &lt;- read_csv(\"Data/Exam_data.csv\")"
  },
  {
    "objectID": "InClass_Ex/In class2/In-class_Ex02.html#visualising-distribution-with-ridgeline-plot",
    "href": "InClass_Ex/In class2/In-class_Ex02.html#visualising-distribution-with-ridgeline-plot",
    "title": "In-class Exercise 2",
    "section": "2.2 Visualising Distribution with Ridgeline Plot",
    "text": "2.2 Visualising Distribution with Ridgeline Plot\n\n2.2.1 Plotting ridgeline graph: ggridges method\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    colour = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English Grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n2.2.2 Varying fill colors along the x axis\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English Grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n2.2.3 Mapping the probabilities directly with color\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\",\n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail Probability\",\n                       direction = -1) +\n  theme_ridges()"
  },
  {
    "objectID": "InClass_Ex/In class2/In-class_Ex02.html#visualising-distribution-with-raincloud-plot",
    "href": "InClass_Ex/In class2/In-class_Ex02.html#visualising-distribution-with-raincloud-plot",
    "title": "In-class Exercise 2",
    "section": "2.3 Visualising Distribution with Raincloud Plot",
    "text": "2.3 Visualising Distribution with Raincloud Plot\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "InClass_Ex/In class2/In-class_Ex02.html#finishing-touch",
    "href": "InClass_Ex/In class2/In-class_Ex02.html#finishing-touch",
    "title": "In-class Exercise 2",
    "section": "2.4 Finishing touch",
    "text": "2.4 Finishing touch\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09a/Hands-on_Ex09a.html",
    "href": "Hands-on_Ex/Hands-on_Ex09a/Hands-on_Ex09a.html",
    "title": "Hands-on Ex09",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. The R packages installed are:\n\nggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\n\npacman::p_load(ggtern, plotly, tidyverse)\n\n\n\n\n\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\n\n\n\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)\n\nagpop_mutated\n\n# A tibble: 234 × 25\n   PA         SZ       Year  `AGE0-4` `AGE05-9` `AGE10-14` `AGE15-19` `AGE20-24`\n   &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1 Ang Mo Kio Ang Mo … 2018       180       270        320        300        260\n 2 Ang Mo Kio Cheng S… 2018      1060      1080       1080       1260       1400\n 3 Ang Mo Kio Chong B… 2018       900       900       1030       1220       1380\n 4 Ang Mo Kio Kebun B… 2018       720       850       1010       1120       1230\n 5 Ang Mo Kio Sembawa… 2018       220       310        380        500        550\n 6 Ang Mo Kio Shangri… 2018       550       630        670        780        950\n 7 Ang Mo Kio Tagore   2018       260       340        430        500        640\n 8 Ang Mo Kio Townsvi… 2018       830       930        930        860       1020\n 9 Ang Mo Kio Yio Chu… 2018       160       160        220        260        350\n10 Ang Mo Kio Yio Chu… 2018       810      1070       1300       1450       1500\n# ℹ 224 more rows\n# ℹ 17 more variables: `AGE25-29` &lt;dbl&gt;, `AGE30-34` &lt;dbl&gt;, `AGE35-39` &lt;dbl&gt;,\n#   `AGE40-44` &lt;dbl&gt;, `AGE45-49` &lt;dbl&gt;, `AGE50-54` &lt;dbl&gt;, `AGE55-59` &lt;dbl&gt;,\n#   `AGE60-64` &lt;dbl&gt;, `AGE65-69` &lt;dbl&gt;, `AGE70-74` &lt;dbl&gt;, `AGE75-79` &lt;dbl&gt;,\n#   `AGE80-84` &lt;dbl&gt;, AGE85over &lt;dbl&gt;, YOUNG &lt;dbl&gt;, ACTIVE &lt;dbl&gt;, OLD &lt;dbl&gt;,\n#   TOTAL &lt;dbl&gt;\n\n\n\n\n\n\nggtern(data = agpop_mutated,\n       aes(x = YOUNG,\n           y = ACTIVE,\n           z = OLD)) +\n  geom_point() +\n  labs(title = \"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\nplot_ly(\n  data = agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) |&gt; \n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09a/Hands-on_Ex09a.html#plotting-ternary-diagram-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex09a/Hands-on_Ex09a.html#plotting-ternary-diagram-with-r",
    "title": "Hands-on Ex09",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. The R packages installed are:\n\nggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\n\npacman::p_load(ggtern, plotly, tidyverse)\n\n\n\n\n\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\n\n\n\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)\n\nagpop_mutated\n\n# A tibble: 234 × 25\n   PA         SZ       Year  `AGE0-4` `AGE05-9` `AGE10-14` `AGE15-19` `AGE20-24`\n   &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1 Ang Mo Kio Ang Mo … 2018       180       270        320        300        260\n 2 Ang Mo Kio Cheng S… 2018      1060      1080       1080       1260       1400\n 3 Ang Mo Kio Chong B… 2018       900       900       1030       1220       1380\n 4 Ang Mo Kio Kebun B… 2018       720       850       1010       1120       1230\n 5 Ang Mo Kio Sembawa… 2018       220       310        380        500        550\n 6 Ang Mo Kio Shangri… 2018       550       630        670        780        950\n 7 Ang Mo Kio Tagore   2018       260       340        430        500        640\n 8 Ang Mo Kio Townsvi… 2018       830       930        930        860       1020\n 9 Ang Mo Kio Yio Chu… 2018       160       160        220        260        350\n10 Ang Mo Kio Yio Chu… 2018       810      1070       1300       1450       1500\n# ℹ 224 more rows\n# ℹ 17 more variables: `AGE25-29` &lt;dbl&gt;, `AGE30-34` &lt;dbl&gt;, `AGE35-39` &lt;dbl&gt;,\n#   `AGE40-44` &lt;dbl&gt;, `AGE45-49` &lt;dbl&gt;, `AGE50-54` &lt;dbl&gt;, `AGE55-59` &lt;dbl&gt;,\n#   `AGE60-64` &lt;dbl&gt;, `AGE65-69` &lt;dbl&gt;, `AGE70-74` &lt;dbl&gt;, `AGE75-79` &lt;dbl&gt;,\n#   `AGE80-84` &lt;dbl&gt;, AGE85over &lt;dbl&gt;, YOUNG &lt;dbl&gt;, ACTIVE &lt;dbl&gt;, OLD &lt;dbl&gt;,\n#   TOTAL &lt;dbl&gt;\n\n\n\n\n\n\nggtern(data = agpop_mutated,\n       aes(x = YOUNG,\n           y = ACTIVE,\n           z = OLD)) +\n  geom_point() +\n  labs(title = \"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\nplot_ly(\n  data = agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) |&gt; \n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "title": "Hands-on Ex07",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. The R packages installed are:\n\nlubridate package to work with date and time\n\n\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#install-and-launching-r-packages",
    "title": "Hands-on Ex07",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. The R packages installed are:\n\nlubridate package to work with date and time\n\n\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-calendar-heatmap",
    "title": "Hands-on Ex07",
    "section": "2. Plotting Calendar Heatmap",
    "text": "2. Plotting Calendar Heatmap\n\n2.1 Importing the data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\nCheck data structure below\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\n\n2.2 Data Wrangling\n\n2.2.1 Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task. We will use lubridate::ymd_hms() and lubridate::hour() to format the time. weekdays() is a base R function.\n\nmake_hr_wkday &lt;- function(ts, sc, tz){\n  real_times &lt;- ymd_hms(ts,\n                        tz = tz[1],\n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n\n\n\n2.2.2 Deriving the attacks tibble data frame\nNote: Convert the wkday and hour fields into factor to ensure ordering\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks |&gt; \n  group_by(tz) |&gt; \n  \n  #call the function in Step 2.2.1\n  do(make_hr_wkday(.$timestamp,\n                   .$source_country,\n                   .$tz)) |&gt; \n  \n  ungroup() |&gt; \n  mutate(wkday = factor(wkday, levels = wkday_levels),\n         hour = factor(hour, levels = 0:23)\n  )\n\nVisualising the tidy tibble table after processing\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\n\n2.3 Building Calendar Heatmap\n\n2.3.1 Basic calendar heatmap\n\n#Building grouped by aggregating attacks by wkday and hour fields. Using count(), new field called n is derived to calculate the frequency. na.omit() excludes the missing value\ngrouped &lt;- attacks |&gt; \n  count(wkday, hour) |&gt; \n  ungroup() |&gt; \n  na.omit()\n\nggplot(data = grouped,\n       aes(x = hour,\n           y = wkday,\n           fill = n)) +\n  \n  #plot the tiles (grids) at each x and y position, color and size arguments specify the border color and line size of the tiles\n  geom_tile(color = \"white\",\n            size = 0.1) +\n  \n  #remove border, axis lines, grids using theme_tufte\n  theme_tufte(base_family = \"serif\") +\n  \n  #ensure the plot has aspect ratio of 1:1\n  coord_equal() +\n  \n  #create gradient color scheme\n  scale_fill_gradient(name = '# of attacks',\n                      low = 'skyblue',\n                      high = 'darkblue') +\n  labs(x = NULL,\n       y = NULL,\n       title = \"Attacks by weekday and time of day\") +\n  \n  theme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n2.3.2 Multiple calendar heatmap by source_country\nStep 1: Identify top 4 countries with highest number of attacks\n\n#count the number of attacks by country\nattacks_by_country &lt;- count(\n  attacks, source_country) |&gt; \n  \n  #calculate the percent of attacks by country\n  mutate(percent = percent(n/sum(n))) |&gt; \n  \n  #arrange it in descending order\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\n\n#select the top 4 countries in c() format\ntop4 &lt;- attacks_by_country$source_country[1:4]\n\n\ntop4_attacks &lt;- attacks |&gt; \n  \n  #filter by top 4 countries\n  filter(source_country %in% top4) |&gt; \n  \n  #group by source_country, wkday, hour and countr frequencies\n  count(source_country, wkday, hour) |&gt; \n  ungroup() |&gt; \n  \n  #convert source_country to factor with levels of top4\n  mutate(source_country = factor(\n    source_country, levels = top4)) |&gt; \n  \n  #remove missing data\n  na.omit()\n\nStep 3: Plotting\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"serif\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-cycle-plot",
    "title": "Hands-on Ex07",
    "section": "3. Plotting Cycle Plot",
    "text": "3. Plotting Cycle Plot\n\n3.1 Importing the data\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\n3.2 Data Wrangling\n\n3.2.1 Deriving month and year fields\nCreate two new fields called month and year from Month-Year field\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\n3.2.2 Select the target country\n\nVietnam &lt;- air |&gt; \n  select(Vietnam,\n         month,\n         year) |&gt; \n  filter(year &gt;= 2010)\n\n\n\n3.2.3 Compute year average arrivals by month\n\nhline.data &lt;- Vietnam |&gt; \n  group_by(month) |&gt; \n  summarise(avgvalue = mean(Vietnam))\n\n\n\n\n3.3 Building Cycle Plot\n\nggplot() +\n  geom_line(data = Vietnam,\n            aes(x = year,\n                y = Vietnam,\n                group = month),\n            color = \"black\") +\n  geom_hline(aes(yintercept=avgvalue),\n             data = hline.data,\n             linetype = 6,\n             color = \"red\",\n             size = 0.5) +\n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands_on Ex04",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. The R packages installed are:\n\nggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started",
    "title": "Hands_on Ex04",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. The R packages installed are:\n\nggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visual-statistical-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visual-statistical-analysis",
    "title": "Hands_on Ex04",
    "section": "2. Visual Statistical Analysis",
    "text": "2. Visual Statistical Analysis\n\n2.1 One-sample test using gghistostats for\n\nset.seed(1234)\n\ngghistostats(\n  data = exam_data,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\n\n\n2.2 Two-sample mean test using ggbetweenstats\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER,\n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n2.3 Oneway ANOVA Test using ggbetweenstats\n\nggbetweenstats(\n  data = exam_data, \n  x = RACE, \n  y = ENGLISH, \n  type = \"p\", \n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE,\n  #\"ns\" for only non-significant, \"s\" for only significant, \"all\" for everything\n  pairwise.display = \"s\",      \n  p.adjust.method = \"fdr\", \n  messages = FALSE \n  )\n\n\n\n\n\n\n2.4 Significant Test of Correlation using ggscatterstats\n\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE\n)\n\n\n\n\n\n\n2.5 Significant Test of Association (Dependence) using ggbarstats\n\n#Binning Maths scores to 4-class variable\nexam1 &lt;- exam_data |&gt; \n  mutate(MATHS_bins =\n           cut(MATHS, \n               breaks = c(0, 60, 75, 85, 100)))\n\n\nggbarstats(\n  data = exam1,\n  x = MATHS_bins,\n  y = GENDER\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-models",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-models",
    "title": "Hands_on Ex04",
    "section": "3. Visualising Models",
    "text": "3. Visualising Models\n\n3.1 Preparation\n\npacman::p_load(readxl, performance, parameters, see)\n\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\n\n\n\n3.2 Multiple Regression Model using lm()\nCalibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM +\n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\n3.3 Checking for multicollinearity using check_collinearity()\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\n#plot the collinearity\nplot(check_collinearity(model))\n\n\n\n\nAge_08_04 and Mfg_Year are highly correlated. Remove Mfg_Year\n\n\n3.4 Checking for normality assumption using check_normality()\n\n#Remove Mfg_Year from model\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\nplot(check_n)\n\n\n\n\nThe analytical histogram above is specially designed for normality assumption test. When the residual histogram (in cyan colour) is not closed to the theoretical histogram (i.e in green), then we will reject the Null hypothesis and infer that the model residual failed to conform to normality assumption.\n\n\n3.5 Checking for homogeneity of variances using check_heteroscedasticity()\n\ncheck_h &lt;- check_heteroscedasticity(model1)\nplot(check_h)\n\n\n\n\nThe analytical scatter plot is used to perform homogeneity of Variance assumption test. A constant variance distribution should be flat and horizontal and the data points should be scattered around the fit line. The chart above shows clear sign of heteroscedasticity.\n\n\n3.6 Complete check using check_model()\n\ncheck_model(model1)\n\n\n\n\n\n\n3.7 Visualising Regression Parameters\nUsing plot() and parameters()\n\nplot(parameters(model1))\n\n\n\n\nUsing ggcoefstats() of ggstatsplot package\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-uncertainty",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-uncertainty",
    "title": "Hands_on Ex04",
    "section": "4. Visualising Uncertainty",
    "text": "4. Visualising Uncertainty\n\n4.1 Preparation\n\npacman::p_load(tidyverse, plotly, crosstalk, DT, ggdist, gganimate)\n\n\n\n4.2 Visualizing uncertainty of point estimates using ggplot2\n\nA point estimate is a single number, such as a mean.\nUncertainty is expressed as standard error, confidence interval, or credible interval\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n#group by RACE and calculate mean, sd, and se of MATHS score\nmy_sum &lt;- exam_data |&gt; \n  group_by(RACE) |&gt; \n  summarize(\n    n = n(),\n    mean = mean(MATHS),\n    sd = sd(MATHS)) |&gt;\n  mutate(se = sd/sqrt(n-1))\nmy_sum$RACE  &lt;- fct_reorder(my_sum$RACE, my_sum$mean, .desc = TRUE)\n\nshowing the tibble in html format\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\nUsing ggplot2 to reveal the standard error of mean maths score by race\n\nggplot(my_sum) +\n  \n  geom_errorbar(\n    aes(x = RACE,\n        ymin = mean - se,\n        ymax = mean + se),\n    width = 0.2,\n    colour = \"black\",\n    alpha = 0.9,\n    linewidth = 0.5) +\n  \n  geom_point(\n    aes(x = RACE,\n        y = mean),\n    stat = \"identity\",\n    colour = \"red\",\n    size = 1.5,\n    alpha = 1) +\n  \n  ggtitle(\"Standard error of mean\n          maths score by race\")\n\n\n\n\nUsing ggplot2 to reveal the 95% confidence interval of mean maths score by race\n\nggplot(my_sum) +\n  \n  geom_errorbar(\n    aes(x = RACE,\n        ymin = mean - 1.96*se,\n        ymax = mean + 1.96*se),\n    width = 0.2,\n    colour = \"black\",\n    alpha = 0.9,\n    linewidth = 0.5) +\n  \n  geom_point(\n    aes(x = RACE,\n        y = mean),\n    stat = \"identity\",\n    colour = \"red\",\n    size = 1.5,\n    alpha = 1) +\n  \n  ggtitle(\"95% confidence interval of mean maths score by race\")\n\n\n\n\nVisualizing the uncertainty of point estimates with interactive error bars\n\nd &lt;- highlight_key(my_sum)\n\np &lt;- ggplot(d) +\n  geom_errorbar(\n    aes(x = RACE,\n        ymin = mean - 2.58*se,\n        ymax = mean + 2.58*se),\n    width = 0.2,\n    colour = \"black\",\n    alpha = 0.9,\n    linewidth = 0.5) +\n  geom_point(\n    aes(x = RACE,\n        y = mean,\n        text = paste(\"Race:\", RACE,\n                     \"&lt;br&gt;N:\", n,\n                     \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                     \"&lt;br&gt;99% CI:[\", round(mean - 2.58*se, digits = 2), \", \", round(mean + 2.58*se, digits = 2), \"]\")),\n    stat = \"identity\",\n    colour = \"red\",\n    size = 1.5,\n    alpha = 1) +\n  \n  ggtitle(\"99% confidence interval of mean maths score by race\")\n\ngg &lt;- highlight(ggplotly(p, tooltip = \"text\"),\n                \"plotly_selected\")\n\ndt &lt;- DT::datatable(d,\n                    colnames = c(\"\",\"No. of pupils\", \"Avg Scores\", \"Std Dev\", \"Std Error\")) |&gt; \n  formatRound(columns = c(\"mean\", \"sd\", \"se\"), digits = 2)\n\ncrosstalk::bscols(gg,\n                  dt,\n                  widths = 5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.3 Visualizing uncertainty of point estimates using ggdist\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\nUsing stat_pointinterval() of ggdist to build a visual displaying distribution of math scores by race\n\nexam_data |&gt; \n  ggplot(aes(x = RACE,\n             y = MATHS)) +\n  \n  #refer to point_interval argument in stat_pointinterval() help\n  stat_pointinterval(\n    .point = median,\n    .interval = qi     \n  ) +\n  \n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\"\n  )\n\n\n\n\nShowing 95% and 99% confidence interval with mean\n\nexam_data |&gt; \n  ggplot(aes(x = RACE,\n             y = MATHS)) +\n  \n  #refer to point_interval argument in stat_pointinterval() help\n  stat_pointinterval(\n    .point = mean,\n    .interval = c(qi(0.05), qi(0.01))    \n  ) +\n  \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\"\n  )\n\n\n\n\nUsing stat_gradientinterval() of ggdist to build a visual for displaying distribution of maths scores by race.\n\nexam_data |&gt; \n  ggplot(aes(x = RACE,\n             y = MATHS)) +\n  \n  #refer to point_interval argument in stat_pointinterval() help\n  stat_gradientinterval(\n    .point = mean,\n    fill = \"skyblue\",\n    show.legend = TRUE\n  ) +\n  \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\"\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#building-funnel-plot-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#building-funnel-plot-with-r",
    "title": "Hands_on Ex04",
    "section": "5. Building Funnel Plot with R",
    "text": "5. Building Funnel Plot with R\nFunnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities.\n\n5.1 Preparation\nFive R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\nImporting data\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") |&gt; \n  mutate_if(is.character, as.factor)\n\nhead(covid19)\n\n# A tibble: 6 × 7\n  `Sub-district ID` City        District `Sub-district` Positive Recovered Death\n              &lt;dbl&gt; &lt;fct&gt;       &lt;fct&gt;    &lt;fct&gt;             &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1        3172051003 JAKARTA UT… PADEMAN… ANCOL              1776      1691    26\n2        3173041007 JAKARTA BA… TAMBORA  ANGKE              1783      1720    29\n3        3175041005 JAKARTA TI… KRAMAT … BALE KAMBANG       2049      1964    31\n4        3175031003 JAKARTA TI… JATINEG… BALI MESTER         827       797    13\n5        3175101006 JAKARTA TI… CIPAYUNG BAMBU APUS         2866      2792    27\n6        3174031002 JAKARTA SE… MAMPANG… BANGKA             1828      1757    26\n\n\n\n\n5.2 FunnelPlotR methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\nBasic plot\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  #group determines the level of points to e plotted\n  group = `Sub-district`,\n  #change from defaut 'SR' to 'PR'\n  data_type = \"PR\",\n  x_range = c(0, 6500),\n  y_range = c(0, 0.05),\n  #label = NA removes the default label outliers feature\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\",\n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\" \n  )\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n5.3 ggplot2 method\nData preparation\n\ndf &lt;- covid19 |&gt; \n  mutate(rate = Death/Positive) |&gt; \n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) |&gt; \n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\nCalculate the lower an upper limits for 95% and 99% CI\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, number.ul999, number.seq, fit.mean)\n\nPlotting static funnel plot\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            linewidth = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            linewidth = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            linewidth = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            linewidth = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             linewidth = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\nPass this to ggplotly\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Handonex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Handonex03.html",
    "title": "Hands_on Ex03",
    "section": "",
    "text": "In this section, I will excerise how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Handonex03.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Handonex03.html#learning-outcome",
    "title": "Hands_on Ex03",
    "section": "",
    "text": "In this section, I will excerise how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Handonex03.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Handonex03.html#getting-started",
    "title": "Hands_on Ex03",
    "section": "3.2 Getting Started",
    "text": "3.2 Getting Started\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Handonex03.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Handonex03.html#importing-data",
    "title": "Hands_on Ex03",
    "section": "3.3 Importing Data",
    "text": "3.3 Importing Data\n\nexam_data &lt;- read_csv(\"Data/Exam_data.csv\",show_col_types = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Handonex03.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Handonex03.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands_on Ex03",
    "section": "3.4 Interactive Data Visualisation - ggiraph methods",
    "text": "3.4 Interactive Data Visualisation - ggiraph methods\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\n\n3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n3.5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\n3.6.1 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:pink; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\n\n3.6.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE)) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, linewidth = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\nIt creates a function called tooltip that takes three arguments:\n\ny: a numeric value representing the mean.\nymax: a numeric value representing the mean plus the standard error.\naccuracy: a parameter controlling the numeric precision, defaulting to 0.01.\n\nNext, the code creates a ggplot object called gg_point. It uses the exam_data dataset and sets the RACE column as the x-axis. It then adds two layers:\n\nA stat_summary() layer using the GeomInteractiveCol geom to display the means, and using the tooltip function to generate a tooltip for each bar showing the mean maths score and its standard error.\nA stat_summary() layer using error bars to display the standard errors of the means.\n\nSpecifically, the workflow of stat_summary() is as follows:\n\nBased on the statistical function specified by the fun.data parameter (here, it’s mean_se, which calculates the mean and standard error), the data is grouped, and the statistics are calculated.\nThe statistical results for each group are calculated, with the mean stored in y and the mean plus the standard error stored in ymax.(ggplot2 is performing them behind the scenes based on the mean_se specification, and storing the mean in y and mean+SE in ymax, following its built-in rules.)\nAt this point, after_stat() can access the calculated results y and ymax.\nThe function within after_stat() (here, it’s tooltip(y, ymax)) takes the calculated results y and ymax as inputs and generates a new derived value (in this case, a formatted string based on the mean and standard error).\nThis derived value is mapped to a particular attribute of the geometric object; in this example, it’s the tooltip attribute of GeomInteractiveCol.\n\n\n\n3.6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\nWhen stackgroups = TRUE, it means that the dots will be stacked or grouped vertically based on their values on the x-axis (which in this case is the “MATHS” variable). Dots with the same x-value will be stacked on top of each other, rather than being spread out horizontally.\nIf stackgroups = FALSE (the default value), the dots would be spread out horizontally, even if they have the same x-value. This can lead to overlapping dots and make it difficult to discern the distribution of data points.\n\n\n3.6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n3.6.5 Combining tooltip and hover effect\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n3.6.7 Coordinated Multiple Views with ggiraph\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID,\n        tooltip= ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Handonex03.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Handonex03.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands_on Ex03",
    "section": "3.7 Interactive Data Visualisation - plotly methods!",
    "text": "3.7 Interactive Data Visualisation - plotly methods!\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n3.7.2 Working with visual variable: plot_ly() method\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\n3.7.3 Creating an interactive scatter plot: ggplotly() method\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n3.7.4 Coordinated Multiple Views with plotly\n\n# d &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\n\n3.8.1 Interactive Data Table: DT package\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n3.8.2 Linked brushing: crosstalk method\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Ex01",
    "section": "",
    "text": "The code chunk below use p_load() of pacman package to check if tidyverse package are installed in the computer\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"Data/Exam_data.csv\",show_col_types = FALSE)\n\n\n\n\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data = exam_data,aes(x= MATHS))+\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"black\",\n                 fill=\"grey\")+\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\n\n\n\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify().\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x=RACE))+\n      geom_bar()\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS))+\n      geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\nterm\n\nhe y scale is not very useful, in fact it is very misleading.\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,breaks = NULL)  \n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram() \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,aes(x=MATHS))+\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill=GENDER))+\n  geom_histogram(bins=20,\n                 color=\"Grey30\")\n\n\n\n\n\n\n\n\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()          \n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()                      \n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()     \n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= GENDER, \n           y=MATHS)) +\n  geom_boxplot() +\n  geom_point(position=\"jitter\",\n            size=0.5)\n\n\n\n\n\n\n\n\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,y=ENGLISH))+\n  geom_point()+\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point(size=1) +\n  geom_smooth(method=lm, \n              size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n- [`coord_cartesian()`]\n- [`coord_flip()`]\n- [`coord_fixed()`]\n- [`coord_quickmap()`]\n\n\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\n\n\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Ex01",
    "section": "",
    "text": "The code chunk below use p_load() of pacman package to check if tidyverse package are installed in the computer\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Ex01",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"Data/Exam_data.csv\",show_col_types = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "title": "Hands-on Ex01",
    "section": "",
    "text": "R Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data = exam_data,aes(x= MATHS))+\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"black\",\n                 fill=\"grey\")+\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "title": "Hands-on Ex01",
    "section": "",
    "text": "ggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on Ex01",
    "section": "",
    "text": "ggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on Ex01",
    "section": "",
    "text": "ggplot(data=exam_data, \n       aes(x= MATHS))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Ex01",
    "section": "",
    "text": "geom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x=RACE))+\n      geom_bar()\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS))+\n      geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\nterm\n\nhe y scale is not very useful, in fact it is very misleading.\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,breaks = NULL)  \n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram() \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,aes(x=MATHS))+\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill=GENDER))+\n  geom_histogram(bins=20,\n                 color=\"Grey30\")\n\n\n\n\n\n\n\n\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()          \n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()                      \n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()     \n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= GENDER, \n           y=MATHS)) +\n  geom_boxplot() +\n  geom_point(position=\"jitter\",\n            size=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Ex01",
    "section": "",
    "text": "The Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,y=ENGLISH))+\n  geom_point()+\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point(size=1) +\n  geom_smooth(method=lm, \n              size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Ex01",
    "section": "",
    "text": "Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Ex01",
    "section": "",
    "text": "The Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n- [`coord_cartesian()`]\n- [`coord_flip()`]\n- [`coord_fixed()`]\n- [`coord_quickmap()`]\n\n\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Ex01",
    "section": "",
    "text": "Themes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\n\n\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Ex02",
    "section": "",
    "text": "In this chapter, I will practice several ggplot2 extensions to create more elegant and effective statistical graphics.\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on Ex02",
    "section": "2.2 Importing data",
    "text": "2.2 Importing data\n\nexam_data &lt;- read_csv(\"Data/Exam_data.csv\",show_col_types = FALSE)\nhead(exam_data)\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Ex02",
    "section": "2.3 Beyond ggplot2 Annotation: ggrepel",
    "text": "2.3 Beyond ggplot2 Annotation: ggrepel\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n#| output: False\n\nThe Plot\n\n\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nThe code\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH))+\n  geom_point()+\n  geom_smooth(method=lm,\n              size=0.5)+\n  geom_label(aes(label=ID),\n             hjust=0.5,\n              vjust=-0.5)+\n   coord_cartesian(xlim=c(0,100),\n                    ylim=c(0,100))+ \nggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n2.3.1 Working with ggrepel\n\nThe plotThe code\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n2.4.1 Working with ggtheme package\n\n\n\n\n\n\n\n2.4.2 Working with hrbthems package\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code",
    "title": "Hands-on Ex02",
    "section": "The code",
    "text": "The code\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH))+\n  geom_point()+\n  geom_smooth(method=lm,\n              size=0.5)+\n  geom_label(aes(label=ID),\n             hjust=0.5,\n              vjust=-0.5)+\n   coord_cartesian(xlim=c(0,100),\n                    ylim=c(0,100))+ \nggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Ex02",
    "section": "2.5 Beyond Single Graph",
    "text": "2.5 Beyond Single Graph\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\np1 + p2\n\n\n\n\n\n(p1 / p2) | p3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n2.5.5 Creating figure with insert\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n2.5.6 Creating a composite figure by using patchwork and ggtheme\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Handsonex03b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Handsonex03b.html",
    "title": "Hands_on Ex03b",
    "section": "",
    "text": "In this hands-on exercise, I will show how to create animated data visualisation by using gganimate and plotly r packages. At the same time, I will also show how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\n\n\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"Data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nhe purpose of mutate_at is: to apply the as.factor transformation to the columns named “Country” and “Continent” in the data frame, i.e., to convert them from character strings to factor type.\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\n\n\n\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nWarning in geom_point(aes(size = Population, frame = Year), alpha = 0.7, :\nIgnoring unknown aesthetics: frame\n\nggplotly(gg)\n\nWarning in p$x$data[firstFrame] &lt;- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nWarning in geom_point(aes(size = Population, frame = Year), alpha = 0.7):\nIgnoring unknown aesthetics: frame\n\nggplotly(gg)\n\nWarning in p$x$data[firstFrame] &lt;- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Handsonex03b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Handsonex03b.html#getting-started",
    "title": "Hands_on Ex03b",
    "section": "",
    "text": "First, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"Data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nhe purpose of mutate_at is: to apply the as.factor transformation to the columns named “Country” and “Continent” in the data frame, i.e., to convert them from character strings to factor type.\nInstead of using mutate_at(), across() can be used to derive the same outputs."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Handsonex03b.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Handsonex03b.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands_on Ex03b",
    "section": "",
    "text": "gganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Handsonex03b.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Handsonex03b.html#animated-data-visualisation-plotly",
    "title": "Hands_on Ex03b",
    "section": "",
    "text": "In this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nWarning in geom_point(aes(size = Population, frame = Year), alpha = 0.7, :\nIgnoring unknown aesthetics: frame\n\nggplotly(gg)\n\nWarning in p$x$data[firstFrame] &lt;- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nWarning in geom_point(aes(size = Population, frame = Year), alpha = 0.7):\nIgnoring unknown aesthetics: frame\n\nggplotly(gg)\n\nWarning in p$x$data[firstFrame] &lt;- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Ex06",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. The R packages installed are:\n\nlubridate for handling and wrangling time data\nggraph for designing network graphs using ggplot2 skills\n\n\npacman::p_load(igraph, tidygraph, ggraph, visNetwork, lubridate, clock, graphlayouts, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#install-and-launching-r-packages",
    "title": "Hands-on Ex06",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. The R packages installed are:\n\nlubridate for handling and wrangling time data\nggraph for designing network graphs using ggplot2 skills\n\n\npacman::p_load(igraph, tidygraph, ggraph, visNetwork, lubridate, clock, graphlayouts, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-the-data",
    "title": "Hands-on Ex06",
    "section": "2. Importing the data",
    "text": "2. Importing the data\nTwo types of data. One contains the nodes data and the other contains the edges (also know as link) data.\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees.\n\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\nLet’s review the imported data frame\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-wrangling",
    "title": "Hands-on Ex06",
    "section": "3. Data wrangling",
    "text": "3. Data wrangling\n\n3.1 Using lubridate package to change the time\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  \n  #dmy() transforms the SentDate to Date data type\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  \n  #wday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the day spelled in full, i.e. Monday. the values in the Weekday field are in ordinal scale.\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\nGAStech_edges\n\n# A tibble: 9,063 × 10\n   source target SentDate SentTime Subject   MainSubject sourceLabel targetLabel\n    &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;time&gt;   &lt;chr&gt;     &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;      \n 1     43     41 6/1/2014 08:39    GT-Seism… Work relat… Sven.Flecha Isak.Baza  \n 2     43     40 6/1/2014 08:39    GT-Seism… Work relat… Sven.Flecha Lucas.Alca…\n 3     44     51 6/1/2014 08:58    Inspecti… Work relat… Kanon.Herr… Felix.Resu…\n 4     44     52 6/1/2014 08:58    Inspecti… Work relat… Kanon.Herr… Hideki.Coc…\n 5     44     53 6/1/2014 08:58    Inspecti… Work relat… Kanon.Herr… Inga.Ferro \n 6     44     45 6/1/2014 08:58    Inspecti… Work relat… Kanon.Herr… Varja.Lagos\n 7     44     44 6/1/2014 08:58    Inspecti… Work relat… Kanon.Herr… Kanon.Herr…\n 8     44     46 6/1/2014 08:58    Inspecti… Work relat… Kanon.Herr… Stenig.Fus…\n 9     44     48 6/1/2014 08:58    Inspecti… Work relat… Kanon.Herr… Hennie.Osv…\n10     44     49 6/1/2014 08:58    Inspecti… Work relat… Kanon.Herr… Isia.Vann  \n# ℹ 9,053 more rows\n# ℹ 2 more variables: SendDate &lt;date&gt;, Weekday &lt;ord&gt;\n\n\n\n\n3.2 Wrangling attributes\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\nGAStech_edges_aggregated\n\n# A tibble: 1,372 × 4\n   source target Weekday   Weight\n    &lt;dbl&gt;  &lt;dbl&gt; &lt;ord&gt;      &lt;int&gt;\n 1      1      2 Sunday         5\n 2      1      2 Monday         2\n 3      1      2 Tuesday        3\n 4      1      2 Wednesday      4\n 5      1      2 Friday         6\n 6      1      3 Sunday         5\n 7      1      3 Monday         2\n 8      1      3 Tuesday        3\n 9      1      3 Wednesday      4\n10      1      3 Friday         6\n# ℹ 1,362 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#using-tidygraph-to-create-network-objects",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#using-tidygraph-to-create-network-objects",
    "title": "Hands-on Ex06",
    "section": "4. Using tidygraph to create network objects",
    "text": "4. Using tidygraph to create network objects\ntidygraph package provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them.\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network\n\n\n4.1 Using tbl_graph() to build tidygraph’s graph object\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 1372 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n\n\n\n\n4.2 Plotting Network Data with ggraph package\nggraph builds upon three core concepts that are quite easy to understand:\n\nThe Layout defines how nodes are placed on the plot, that is, it is a conversion of the relational structure into an x and y value for each node in the graph. ggraph has access to all layout functions available in igraph and furthermore provides a large selection of its own, such as hive plots, treemaps, and circle packing.\nThe Nodes are the connected entities in the relational structure. These can be plotted using the geom_node_*() family of geoms. Some node geoms make more sense for certain layouts, e.g. geom_node_tile() for treemaps and icicle plots, while others are more general purpose, e.g. geom_node_point().\nThe Edges are the connections between the entities in the relational structure. These can be visualized using the geom_edge_*() family of geoms that contain a lot of different edge types for different scenarios. Sometimes the edges are implied by the layout (e.g. with treemaps) and need not be plotted, but often some sort of line is warranted.\n\nPlotting the basic network graph with ggraph(), geom_edge_link() and geom_node_point()\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.\ntheme_graph() removes redundant elements in order to focus on the network data\n\nggraph(GAStech_graph) +\n  geom_edge_link(aes(color = 'grey50')) +\n  geom_node_point(aes(color = 'grey40')) + \n  theme_graph(background = \"black\",\n              text_colour = \"white\")\n\n\n\n\nChanging the layout\n\nggraph(GAStech_graph, \n            #\"fr\" stands for Fruchterman and Reingold layout\n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes()) + \n  theme_graph()\n\n\n\n\nModifying the nodes to the respective departments\n\nggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  #geom_node_point is equivalent to geom_point in ggplot2\n  geom_node_point(aes(colour = Department, \n                      size = 3)) + \n  theme_graph()\n\n\n\n\nModifying the edges (line thickness) to the weight variable\n\nggraph(GAStech_graph, \n            layout = \"nicely\") +\n  \n  #geom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3) + \n  theme_graph()\n\n\n\n\n\n\n4.3 Creating facet graphs\nIn visualising network data, faceting can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, faceting techniques are used to visualise network data.\nThere are three functions in ggraph to implement faceting, they are:\n\nfacet_nodes() whereby edges are only drawn in a panel if both terminal nodes are present here,\nfacet_edges() whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\nfacet_graph() faceting on two variables simultaneously.\n\nExample with facet_nodes()\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\nExample with facet_edges()\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) \n\ng + facet_edges(~Weekday) +\n  \n  #add frame to the facets\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#network-metrics-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#network-metrics-analysis",
    "title": "Hands-on Ex06",
    "section": "5. Network Metrics Analysis",
    "text": "5. Network Metrics Analysis\n\n5.1 Computing centrality Indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Refer to Chapter 7: Actor Prominence of A User’s Guide to Network Analysis in R to gain better understanding of theses network measures.\n\nGAStech_graph %&gt;%\n  \n  #centrality_betweenness() is from tidygraph\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality)) + \n  theme_graph()\n\n\n\n\n\n\n5.2 Visualising network metrics\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\n#this graph is the same as above, but there is no need to perform mutate(), we can just specify size = centrality_betweenness()\nGAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness())) + \n  theme_graph()\n\n\n\n\n\n\n5.3 Visualising community\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nUsing edge-betweenness algorithm\n\nGAStech_graph %&gt;%\n  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community)) + \n  theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#interactive-network-graph-with-visnetwork",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#interactive-network-graph-with-visnetwork",
    "title": "Hands-on Ex06",
    "section": "6. Interactive Network Graph with visNetwork",
    "text": "6. Interactive Network Graph with visNetwork\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\n\nThe nodes list must include an “id” column, and the edge list must have “from” and “to” columns.\nThe function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.\n\n\n6.1 Data preparation\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n6.2 Plotting the interactive network graph\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\n\n\n6.3 Working with visual attributes - Nodes\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n6.4 Working with visual attributes - Edges\nIn the code run below visEdges() is used to symbolise the edges. - The argument arrows is used to define where to place the arrow. - The smooth argument is used to plot the edges using a smooth curve.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n6.5 Adding interactivity\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation. - The argument highlightNearest highlights nearest when clicking a node. - The argument nodesIdSelection adds an id node selection creating an HTML select element.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08new/Hands-on_Ex08.html",
    "href": "Hands-on_Ex/Hands-on_Ex08new/Hands-on_Ex08.html",
    "title": "Hands-on Ex08",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. The R packages installed are:\n\nsf for handling geospatial data\ntmap to plot functional and truthful choropleth map\n\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08new/Hands-on_Ex08.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex08new/Hands-on_Ex08.html#install-and-launching-r-packages",
    "title": "Hands-on Ex08",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. The R packages installed are:\n\nsf for handling geospatial data\ntmap to plot functional and truthful choropleth map\n\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08new/Hands-on_Ex08.html#plotting-choropleth-map",
    "href": "Hands-on_Ex/Hands-on_Ex08new/Hands-on_Ex08.html#plotting-choropleth-map",
    "title": "Hands-on Ex08",
    "section": "2. Plotting Choropleth Map",
    "text": "2. Plotting Choropleth Map\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\n\n2.1 Importing the data\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\nmpsz &lt;-  sf::st_read(dsn = \"data/geospatial\",\n                     layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\Michelle\\Documents\\SMU\\MiZhyn\\VAA\\Hands-on_Ex\\Hands-on_Ex08new\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n2.2 Data wrangling\nCreating new variables called YOUNG, ECONOMY ACTIVE, and AGED\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  \n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  \n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+rowSums(.[13:15]))%&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\nBefore ioining the attribute and geospatial data, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase\n\npopdata2020 &lt;- popdata2020 |&gt; \n  mutate_at(.vars = vars(PA, SZ),\n            .funs = funs(toupper)) |&gt; \n  \n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\n\n2.3 Plotting the map\n\n2.3.1 Using qtm()\nPlotting standard choropleth map using qtm()\n\n#tmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\ntmap_mode(\"plot\")\n\n#fill argument is used to map the attribute (i.e. DEPENDENCY)\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n2.3.2 Using tmap() elements\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks. To specify the method, the style argument of tm_fill() or tm_polygons() should be used. We can also specify n argument to specify the number of classes (i.e., n = 5).\nWe can also specify the category breaks manually by specifying the breaks argument of the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order). Example would be breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\n\n#tm_shape defines the input data. We can use tm_polygons() to draw the planning subzone polygons\ntm_shape(mpsz_pop2020)+\n  \n#We can assign variable to tm_polygons() like below\n  #tm_polygons(\"DEPENDENCY\") \n  \n  #tm_fill() ONLY shadses the polygons by using a color scheme\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\",\n          \n          #This is using colorbrewer palette. if We want to reverse the color order, we can add '-' in front of the palette (i.e., \"-Blues\")\n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  \n  #set the layout\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  \n  #tm_borders() draw the borders of the shapefil onto the choropleth map\n  #lwd is border line width, col is border color, and lty is the line type\n  tm_borders(lwd = 0.1, alpha = 0.5) +\n  \n  #add compass\n  tm_compass(type=\"8star\", size = 2) +\n  \n  #add scale bar\n  tm_scale_bar(width = 0.15) +\n  \n  #add grid lines\n  tm_grid(alpha =0.2) +\n  \n  #default style\n  tmap_style(\"white\") +\n  \n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nSpecifying map legends and style\n\ntm_shape(mpsz_pop2020)+\n  \n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  \n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  \n  tm_borders(alpha = 0.5) +\n  \n  tmap_style(\"classic\")\n\n\n\n\n\n\n2.3.3 Creating facet choropleth maps\n\n2.3.3.1 By assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+\n  \n  #fill by both Young and Aged and specify ncols = 2\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\", \"Greens\"),\n          ncols = 2) +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n2.3.3.2 By defining a group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  \n  #use tm_facets() to facet by REGION_N\n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  \n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  \n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.3.3.3 By creating multiple stand-alone maps with tmap_arrange()\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n2.3.4 Mappping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\n#filter by CENTRAL REGION only\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08new/Hands-on_Ex08.html#visualising-geospatial-point-data",
    "href": "Hands-on_Ex/Hands-on_Ex08new/Hands-on_Ex08.html#visualising-geospatial-point-data",
    "title": "Hands-on Ex08",
    "section": "3. Visualising Geospatial Point Data",
    "text": "3. Visualising Geospatial Point Data\nProportional symbol maps (also known as graduate symbol maps) are a class of maps that use the visual variable of size to represent differences in the magnitude of a discrete, abruptly changing phenomenon, e.g. counts of people. Like choropleth maps, you can create classed or unclassed versions of these maps. The classed ones are known as range-graded or graduated symbols, and the unclassed are called proportional symbols, where the area of the symbols are proportional to the values of the attribute being mapped. In this hands-on exercise, you will learn how to create a proportional symbol map showing the number of wins by Singapore Pools’ outlets using an R package called tmap.\n\n3.1 Importing the data\nThe data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format.\nFigure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in Singapore SVY21 Projected Coordinates System.\nNotice that sgpools is aspatial (not based on Geographic Coordinates Systems)\n\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\n\nlist(sgpools)\n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows\n\n\n\n\n3.2 Creating a sf dataframe from an aspatial data frame\nThe st_as_sf() function adds a new column called geometry which specify the points\n\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       \n                       #provide column name of the x-coordinates first, followed by y-coordinates\n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       \n                       #provide the coordinate systems in epsg format\n                       crs= 3414)\n\nEPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by refering to epsg.io.\n\n\n3.3 Plotting the map\n\n#make this interactive by setting tmap_mode to \"view\"\ntmap_mode(\"view\")\n\ntm_shape(sgpools_sf)+\n  \n          #specify colors by the OUTLET TYPE\ntm_bubbles(col = \"OUTLET TYPE\", \n          #make the size proportional to Gp1Gp2 Winnings\n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1)\n\n\n\n\n\n\nWe can also add tm_facets() which is in sync (zoom and pan settings)\n\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1) +\n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSwitch back to tmap plot mode\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08new/Hands-on_Ex08.html#analytical-mapping",
    "href": "Hands-on_Ex/Hands-on_Ex08new/Hands-on_Ex08.html#analytical-mapping",
    "title": "Hands-on Ex08",
    "section": "4. Analytical Mapping",
    "text": "4. Analytical Mapping\n\n4.1 Importing the data\nFor the purpose of this hands-on exercise, a prepared data set called NGA_wp.rds will be used. The data set is a polygon feature data.frame providing information on water point of Nigeria at the LGA level. You can find the data set in the rds sub-direct of the hands-on data folder.\n\nNGA_wp &lt;- read_rds(\"data/rds/NGA_wp.rds\")\n\n\n\n4.2 Basic Choropleth Mapping\nPlotting the distribution of water point by LGA\n\n#functional water\np1 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs\",\n            legend.outside = FALSE)\n\n\n#non-functional water\np2 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\"wp_nonfunctional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs\",\n            legend.outside = FALSE)\n\n\n#total water\np3 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of total  water point by LGAs\",\n            legend.outside = FALSE)\n\n\ntmap_arrange(p3, p1, p2, ncol = 1)\n\n\n\n\n\n\n4.3 Choropleth Mapping for Rates\nIn much of our readings we have now seen the importance to map rates rather than counts of things, and that is for the simple reason that water points are not equally distributed in space. That means that if we do not account for how many water points are somewhere, we end up mapping total water point size rather than our topic of interest.\nDeriving proportion of functional water points and non-functional water points\n\nNGA_wp &lt;- NGA_wp |&gt; \n  mutate(pct_functional = wp_functional/total_wp) |&gt; \n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\nPlotting the map\n\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water point by LGAs\",\n            legend.outside = TRUE)\n\n\n\n\n\n\n4.4 Extreme Value Maps\nExtreme value maps are variations of common choropleth maps where the classification is designed to highlight extreme values at the lower and upper end of the scale, with the goal of identifying outliers. These maps were developed in the spirit of spatializing EDA, i.e., adding spatial features to commonly used approaches in non-spatial EDA (Anselin 1994).\n\n4.4.1 Percentile Map\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\n\n4.4.1.1 Data Preparation\nRemove NA\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  drop_na()\n\nCreating customised classification and extracting values\nWhen variables are extracted from an sf data.frame, the geometry is extracted as well. For mapping and spatial manipulation, this is the expected behavior, but many base R functions cannot deal with the geometry. Specifically, the quantile() gives an error. As a result st_set_geomtry(NULL) is used to drop geometry field.\n\npercent &lt;- c(0,.01,.1,.5,.9,.99,1)\nvar &lt;- NGA_wp[\"pct_functional\"] %&gt;%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\n\n4.4.1.2 Creating get.var function\nFirstly, we will write an R function as shown below to extract a variable (i.e. wp_nonfunctional) as a vector out of an sf data.frame. This will achieve the same function as 4.4.1.1\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n4.4.1.3 Creating function to plot percentile mapping\n\npercentmap &lt;- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent &lt;- c(0,.01,.1,.5,.9,.99,1)\n  \n  #Use the get.var function above to get vector \n  var &lt;- get.var(vnam, df)\n  bperc &lt;- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\n\n4.4.1.4 Drawing the map using the function\n\npercentmap(vnam = \"total_wp\", df = NGA_wp)\n\n\n\n\n\n\n\n4.4.2 Box Map\nIn essence, a box map is an augmented quartile map, with an additional lower and upper category. When there are lower outliers, then the starting point for the breaks is the minimum value, and the second break is the lower fence. In contrast, when there are no lower outliers, then the starting point for the breaks will be the lower fence, and the second break is the minimum value (there will be no observations that fall in the interval between the lower fence and the minimum value).\nLet’s examine the boxplot distribution of nonfunctional water points\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\nTo create a box map, a custom breaks specification will be used. However, there is a complication. The break points for the box map vary depending on whether lower or upper outliers are present.\n\n4.4.2.1 Creating boxbreaks function\nThe code chunk below is an R function that creating break points for a box map.\n\narguments:\n\nv: vector with observations\nmult: multiplier for IQR (default 1.5)\n\nreturns:\n\nbb: vector with 7 break points compute quartile and fences\n\n\n\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[4] - qv[2]\n  upfence &lt;- qv[4] + mult * iqr\n  lofence &lt;- qv[2] - mult * iqr\n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  if (upfence &gt; qv[5]) { # no upper outliers\n    bb[7] &lt;- upfence\n    bb[6] &lt;- ceiling(qv[5])\n  } else {\n    bb[6] &lt;- upfence\n    bb[7] &lt;- qv[5]\n  }\n  bb[3:5] &lt;- qv[2:4]\n  return(bb)\n}\n\n\n\n4.4.2.2 Creating get.var function\nRefer to Section 4.4.1.2\n\n\n4.4.2.3 Testing the function\n\nvar &lt;- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n\n\n4.4.2.4 Creating function to plot boxmap\nThe code chunk below is an R function to create a box map.\n\narguments:\n\nvnam: variable name (as character, in quotes)\ndf: simple features polygon layer\nlegtitle: legend title\nmtitle: map title\nmult: multiplier for IQR\n\nreturns: - a tmap-element (plots a map)\n\n\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\n\n4.4.2.5 Drawing the map using the function\n\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09b/Hands-on_Ex09b.html",
    "href": "Hands-on_Ex/Hands-on_Ex09b/Hands-on_Ex09b.html",
    "title": "Hands-on Ex09b",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. The R packages installed are:\n\ncorrplot. A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals.\nheatmaply is an R package for building interactive cluster heatmap that can be shared online as a stand-alone HTML file\nggparcoord() of GGally package\nparallelPlotis an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js\n\n\npacman::p_load(corrplot, ggstatsplot, seriation, dendextend, heatmaply, GGally, parallelPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09b/Hands-on_Ex09b.html#visualising-correlation-matrices",
    "href": "Hands-on_Ex/Hands-on_Ex09b/Hands-on_Ex09b.html#visualising-correlation-matrices",
    "title": "Hands-on Ex09b",
    "section": "1. Visualising Correlation Matrices",
    "text": "1. Visualising Correlation Matrices\n\n1.1 Importing the data\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")\nwine\n\n# A tibble: 6,497 × 13\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1             7.4               0.7           0                 1.9     0.076\n 2             7.8               0.88          0                 2.6     0.098\n 3             7.8               0.76          0.04              2.3     0.092\n 4            11.2               0.28          0.56              1.9     0.075\n 5             7.4               0.7           0                 1.9     0.076\n 6             7.4               0.66          0                 1.8     0.075\n 7             7.9               0.6           0.06              1.6     0.069\n 8             7.3               0.65          0                 1.2     0.065\n 9             7.8               0.58          0.02              2       0.073\n10             7.5               0.5           0.36              6.1     0.071\n# ℹ 6,487 more rows\n# ℹ 8 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;, type &lt;chr&gt;\n\n\nColumn 1 to 11 are all numerical and continuous variables, while the last two are categorical\n\n\n1.2 Building with pairs() method\nSyntax description of pairs function\nPlotting the column 1 to 11. Note this can be adjusted to selected columns\n\npairs(wine[,1:11])\n\n\n\n\nSometimes we only want to show the upper or lower half of the correlation matrix as they are symmetric. Change the argument upper.panel = NULL to lower.panel = NULL to get the opposite impact.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\nShowing the correlation coefficient of each pair of variables using panel.cor function\n\n#|warning: false\npanel.cor &lt;- function(x, y, digits = 2, prefix = \"\", cex.cor, ...) {\n  usr &lt;- par(\"usr\")\n  on.exit(par(usr))\n  par(usr = c(0,1,0,1))\n  r &lt;- abs(cor(x, y, use = \"complete.obs\"))\n  txt &lt;- format(c(r, 0.123456789), digits = digits)[1]\n  txt &lt;- paste(prefix, txt, sep=\"\")\n  if(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\n  text(0.5, 0.5, txt, cex = cex.cor * (1 + r)/2)\n}\n\npairs(wine[,2:12], upper.panel = panel.cor)\n\n\n\n\n\n\n1.3 Building with ggcormat() method\nVisualising correlation matrix by using ggcorrmat() of ggstatsplot package provides a comprehensive and yet professional statistical report.\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n\nBuilding multiple plots is possible using grouped_ggcorrmat() of ggstatsplot.\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,        #to build facet plot\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  \n  #provides list of additional arguments\n  plotgrid.args = list(ncol = 2),       \n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  \n  #calling plot annotations arguments of patchwork\n  annotation.args = list(               \n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\n\n1.4 Building with corrplot package\nFull documentations on corrplot package - An Introduction to corrplot Package\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\nFurther Customisation below.\nOther layout design argument such as tl.pos, tl.cex, tl.offset, cl.pos, cl.cex and cl.offset\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,      #turn off diagonal cells\n         tl.col = \"black\")  #change the axis text label color to black\n\n\n\n\nWe can design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",   #placement of the axis label\n               diag = \"l\",      #specify glyph on the principal diagonal\n               tl.col = \"black\")\n\n\n\n\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,  #input the calculated conf.level\n         sig.level = .05)\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n\n#ordering using AOE\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n#ordering using hierarchical clustering using ward\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09b/Hands-on_Ex09b.html#heatmap-for-visualising-and-analysing-multivariate-data",
    "href": "Hands-on_Ex/Hands-on_Ex09b/Hands-on_Ex09b.html#heatmap-for-visualising-and-analysing-multivariate-data",
    "title": "Hands-on Ex09b",
    "section": "2. Heatmap for visualising and analysing multivariate data",
    "text": "2. Heatmap for visualising and analysing multivariate data\nHeatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\n\n2.1 Data import and preparation\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\nrow.names(wh) &lt;- wh$Country\n\nTransforming the data frame into a matrix to make heatmap\n\nwh1 &lt;- select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)\n\n\n\n2.2 Static heatmap\nUsing heatmap() of R stats package. It draws a simple heatmap which is not very informative as the variables are not normalized (i.e., happiness score values are higher than other variables).\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      #the Rowv and Colv below are to switch off the option of plotting the row and column dendograms (cluster)\n                      Rowv=NA, Colv=NA)\n\n\n\n\nNormalising using scale argument\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      \n                      #define font size for y-axis and x-axis labels\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      \n                      #margins ensure entire x-axis labels are displayed completely\n                      margins = c(10, 4))\n\n\n\n\n\n\n2.3 Interactive heatmap\nheatmaply is an R package for building interactive cluster heatmap that can be shared online as a stand-alone HTML file. It is designed and maintained by Tal Galili.\nReview the Introduction to Heatmaply to have an overall understanding of the features and functions of Heatmaply package.\nUser manualof the package\nBasic heatmap using heatmaply, excluding column 1,2,4,5\n\nheatmaply(wh_matrix[, -c(1,2,4,5)])\n\n\n\n\n\n\nScaling method\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\nNormalising method\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\nPercentising method\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\nClustering\nManual approach\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\nStatistical approach\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nUse dend_expend() to determine the recommended clustering method with Euclidean distance\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output above shows that average method should be used as it gives the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster. Figure below shows k = 3 is optimal\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\nUsing above results, plot using heatmaply()\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\nSeriation\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nDifferent algorithms : Optimal Leaf Ordering (OLO), Gruvaeus and Wainer (GW), or “mean” which gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2. The option “none” gives us the dendrograms without any rotation that is based on the data matrix. Example:\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nPutting all together\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          \n          #cluster k = 5\n          k_row = 5,\n          \n          #change the top margin to 60 and row margin to 200\n          margins = c(NA,200,60,NA),\n          \n          #change fontsize for row and column labels\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09b/Hands-on_Ex09b.html#parallel-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex09b/Hands-on_Ex09b.html#parallel-coordinates",
    "title": "Hands-on Ex09b",
    "section": "3. Parallel Coordinates",
    "text": "3. Parallel Coordinates\nParallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them.\nThe strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.\nParallel coordinates plot can be used to characterise clusters detected during customer segmentation.\n\n3.1 Static Parallel Coordinates Plot\nEnhance visualisation with boxplot\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           \n           #group observations using single variable (Region - column 2) and color\n           groupColumn = 2,\n           \n           #scale the variables using uniminmax method\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\nWorking with facet_wrap()\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  \n  #rotating the x-axis label to improve readability\n  theme(axis.text.x = element_text(angle = 30, hjust = 1))\n\n\n\n\n\n\n3.1 Interactive Parallel Coordinates Plot\nparallelPlot is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js.\n\nwh_i &lt;- wh |&gt; \n  select(\"Happiness score\", c(7:12))\n\n\nhisto &lt;- rep(TRUE, ncol(wh_i))\n\nparallelPlot(wh_i,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE,\n             histoVisibility = histo)"
  },
  {
    "objectID": "InClass_Ex/In class4/In-class_Ex04.html",
    "href": "InClass_Ex/In class4/In-class_Ex04.html",
    "title": "In-class Ex04",
    "section": "",
    "text": "1. Install and loading R packages\n\npacman::p_load(plotly, DT, patchwork, ggstatsplot, readxl, performance, parameters, see, gtsummary, tidyverse)\n\n\n\n2. Importing Data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\n\n\n\n3. Interactivity in plotting\n\nplot_ly(data = exam_data,\n        x = ~ENGLISH,\n        y = ~MATHS,\n        color = ~RACE)\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH,\n                color = RACE)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p) \n\n\n\n\n\n\n\n4. Visual statistical plotting\n\n4.1 Two-sample mean testing\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER,\n  y = MATHS,\n  #\"p\" is parametric test while \"np\" is non-parametric test\n  type = \"p\",\n  messages = FALSE\n)\n\n\n\n\n\n\n4.2 Scatterplot testing\n\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  #the default for marginal is TRUE which will show the marginal plots\n  marginal = TRUE\n)\n\n\n\n\n\n\n\n5. Model visualization\n\n5.1 Building least-square multiple regression model\nlm() is base R model to build least-square multiple regression model\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM +\n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\n5.2 Diagnostic test : Check for multi-collinearity\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n5.3 Diagnostic test : Check for normality assumption\n\n#Remove Mfg_Year from model due to high collinearity\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel1\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04                KM            Weight  \n      -2.186e+03        -1.195e+02        -2.406e-02         1.972e+01  \nGuarantee_Period  \n       2.682e+01  \n\n\n\ncheck_n &lt;- check_normality(model1)\nplot(check_n)\n\n\n\n\n\n\n5.4 Diagnostic test : Check for variance homogeneity\n\ncheck_h &lt;- check_heteroscedasticity(model1)\nplot(check_h)\n\n\n\n\n\n\n5.5 Diagnostic test : Check for everything\n\ncheck_model(model1)\n\n\n\n\n\n\n5.6 Visualizing regression parameters\n\nplot(parameters(model1))\n\n\n\n\n\nggcoefstats(model1, \n            output = \"plot\")\n\n\n\n\n\n\n\n6. Visualization of uncertainty\nData preparation\n\n#group by RACE and calculate mean, sd, and se of MATHS score\nmy_sum &lt;- exam_data |&gt; \n  group_by(RACE) |&gt; \n  summarize(\n    n = n(),\n    mean = mean(MATHS),\n    sd = sd(MATHS)) |&gt;\n  mutate(se = sd/sqrt(n-1))\n\nPlotting using ggplot2\n\nggplot(my_sum) +\n  \n  geom_errorbar(\n    aes(x = RACE,\n        ymin = mean - se,\n        ymax = mean + se),\n    width = 0.2,\n    colour = \"black\",\n    alpha = 0.9,\n    linewidth = 0.5) +\n  \n  geom_point(\n    aes(x = RACE,\n        y = mean),\n    stat = \"identity\",\n    colour = \"red\",\n    size = 1.5,\n    alpha = 1) +\n  \n  ggtitle(\"Standard error of mean\n          maths score by race\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 Visual Analytics and Applications Homepage",
    "section": "",
    "text": "Welcome to a World Where Data Speaks and Insights Shine\nHello World! This is my Visual Analytics and Applications page, where I present my coursework and projects for this module.\nDive into my work as I combine theory with practical applications. Each project is an opportunity to learn, experiment, and push the boundaries of what data analytics can achieve.\nA Feature of My Latest Works:\n\n\n\n\n\n\n\n\n\n\nIn-class Exercise 2\n\n\n\n\n\n\nMichelle Zhang\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class Ex04\n\n\n\n\n\n\nMichelle Zhang\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class Exercise 6\n\n\n\n\n\n\nMichelle Zhang\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Ex01\n\n\n\n\n\n\nMichelle Zhang\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Ex02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands_on Ex03\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands_on Ex03b\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands_on Ex04\n\n\n\n\n\n\nMichell Zhang\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Ex06\n\n\n\n\n\n\nMichelle Zhang\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Ex07\n\n\n\n\n\n\nMichelle Zhang\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Ex08\n\n\n\n\n\n\nMichelle Zhang\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Ex09\n\n\n\n\n\n\nMichelle Zhang\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Ex09b\n\n\n\n\n\n\nMichelle Zhang\n\n\n\n\n\n\n\n\n\n\n\n\nTakehome_ex01\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTakehome_ex02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTakeHome Ex03\n\n\n\n\n\n\nMichelle zhang\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex02/takehomeex02.html#overview",
    "href": "Takehome_Ex/TakeHome Ex02/takehomeex02.html#overview",
    "title": "Takehome_ex02",
    "section": "1. Overview",
    "text": "1. Overview\nThis exercise aims to provide critique and improvements to distribution of transaction Priced by Sale type created by peer in Take-home Exercise 1. This will be done based on clarity and aesthetics. The original design will then be remade using data visualization design principles and best practices using ggplot2, its extensions, andt"
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex02/takehomeex02.html#critique-clarity-and-aesthetics",
    "href": "Takehome_Ex/TakeHome Ex02/takehomeex02.html#critique-clarity-and-aesthetics",
    "title": "Takehome_ex02",
    "section": "2. Critique : Clarity and Aesthetics",
    "text": "2. Critique : Clarity and Aesthetics\n\n2.1 Original Design\n\n\n2.2 Clarity Suggestions:\n\nAdd axis labels: The y-axis should be labeled with “Transacted Price (S$)” or the appropriate currency unit to clarify the data being represented.\nExplain data points: The dots representing individual transactions should be explained, either through a legend or a note, to ensure the audience understands their meaning.\nProvide context: Additional context, such as the total number of transactions or the average price for each sale type, could be helpful for interpreting the data.\nClarify outliers: Some data points appear to be outliers, deviating significantly from the rest of the distribution. These should be highlighted or labeled to avoid confusion.\nAdjust y-axis scale: The y-axis scale could be adjusted to better fit the data range, as the current scale may exaggerate the differences between the lower and higher values.\n\n\n\n2.2 Aesthetics Suggestions:\n\nExplore color options: The current grayscale color scheme is functional but lacks visual appeal. Introducing a carefully chosen color palette could enhance the overall aesthetics.\nRefine plot elements: The box plot elements (whiskers, boxes, and median lines) could benefit from adjustments to line thickness, transparency, or style to improve visual hierarchy and clarity.\nOptimize white space: The white space around the plot area could be better utilized by adjusting the margins or resizing the plot to make more efficient use of the available canvas.\nImprove alignment: The horizontal alignment of the x-axis labels could be improved to ensure they are centered under their respective plot areas.\nConsider alternative visualizations: While box plots are suitable for showing distributions, alternative visualizations like violin plots or ridge plots could be explored to offer a fresh perspective on the data.\nEnhance typography: The font choice, size, and weight could be refined to improve legibility and align with best practices in data visualization typography."
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex02/takehomeex02.html#data-preparation",
    "href": "Takehome_Ex/TakeHome Ex02/takehomeex02.html#data-preparation",
    "title": "Takehome_ex02",
    "section": "3. Data preparation",
    "text": "3. Data preparation\nLaunch R packages and import data from csv using readr::read_csv(). The packages installed are tidyverse, plotly and scales.\n\nlibrary(readr)\n\n\nfiles1&lt;-read.csv(\"data/ResidentialTransaction20240308160536.csv\")\nfiles2&lt;-read.csv(\"data/ResidentialTransaction20240308160736.csv\")\nfiles3&lt;-read.csv(\"data/ResidentialTransaction20240308161009.csv\")\nfiles4&lt;-read.csv(\"data/ResidentialTransaction20240308161109.csv\")\nfiles5&lt;-read.csv(\"data/ResidentialTransaction20240414220633.csv\")\nuniondata &lt;- rbind(files1, files2, files3, files4,files5)\n\n\npacman::p_load(tidyverse, ggstatsplot, ggridges, plotly, dplyr,wesanderson,lubridate)\n\nTransacted.Price….,Transacted.Price….,Area..SQFT. are of type chr,As they should be numeric, they will be cast as num class.\n\nuniondata$Transacted.Price.... &lt;- as.numeric(gsub(\",\", \"\", uniondata$Transacted.Price....))\nuniondata$Area..SQFT. &lt;- as.numeric(gsub(\",\", \"\", uniondata$Area..SQFT.))\nuniondata$Unit.Price....PSF. &lt;- as.numeric(gsub(\",\", \"\", uniondata$Unit.Price....PSF.))\n\nSplitting the uniondata dataset into two separate data frames, one containing data from 2023 and the other containing data from 2024, based on the Sale.Date column. This can be useful for analyzing or processing data from different years separately.\n\nlibrary(lubridate)\nuniondata$Sale.Date &lt;- dmy(uniondata$Sale.Date)\n\n\n# Filter data for 2023\ndata_2023 &lt;- subset(uniondata, format(uniondata$Sale.Date, \"%Y\") == \"2023\")\n\n# Filter data for 2024\ndata_2024 &lt;- subset(uniondata, format(uniondata$Sale.Date, \"%Y\") == \"2024\")"
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex02/takehomeex02.html#plotting-makeover-charts",
    "href": "Takehome_Ex/TakeHome Ex02/takehomeex02.html#plotting-makeover-charts",
    "title": "Takehome_ex02",
    "section": "4. Plotting makeover charts",
    "text": "4. Plotting makeover charts"
  },
  {
    "objectID": "Takehome_Ex/TakeHome Ex02/takehomeex02.html#using-unit-price-per-area-instead-of-total-transaction-price",
    "href": "Takehome_Ex/TakeHome Ex02/takehomeex02.html#using-unit-price-per-area-instead-of-total-transaction-price",
    "title": "Takehome_ex02",
    "section": "4.1 Using unit price per area instead of total Transaction price",
    "text": "4.1 Using unit price per area instead of total Transaction price\nCurrently, our visualization uses total transaction price to show price distributions for different sales types. However, total price can be misleading due to property size variations. For example, a large property sold for 50 million SGD and a smaller property sold for the same total price would have different unit area prices. To accurately compare price distributions, unit area price (price per square meter or price per square foot) should be used. This eliminates the influence of property size and provides a fairer comparison of price levels among different sales types.\n\n\nShow the code\np1 &lt;- ggplot(data_2023, \n       aes(y = `Unit.Price....PSF.`,       \n           x= `Type.of.Sale`)) +\n  geom_boxplot() +\n  ggtitle(\"Transacted Prices in 2023 Q1\")+\n  labs(x = \"Unit Price($）\",y = \"Type of Sale\")\np2 &lt;- ggplot(data_2024, \n       aes(y = `Unit.Price....PSF.`,       \n           x= `Type.of.Sale`)) +\n  geom_boxplot() +\n  ggtitle(\"Transacted Prices in 2024 Q1\")+\n  labs(x = \"Unit Price($）\", y = \"Type of Sale\")\n\ncombined_data &lt;- rbind(data_2023, data_2024)\ncombined_data$Year &lt;- factor(format(combined_data$Sale.Date, \"%Y\"))\n\n# Create the plot\ncombined_plot &lt;- ggplot(combined_data, \n                        aes(y = `Unit.Price....PSF.`,       \n                            x = `Type.of.Sale`)) +\n  geom_boxplot() +\n  ggtitle(\"Transacted Prices Comparison\") +\n  labs(x = \"Type of Sale\", y = \"Unit Price($)\") +\n  facet_wrap(~Year, ncol = 2)\n\n# Display the plot\nprint(combined_plot)\n\n\n\n\n\n\n4.2 Merge the charts\nCurrently, the visualization displays the data for 2024 Q1 and 2023 Q1 separately in two independent plots, which increases the cognitive load for users to visually compare the data for two different time points. Combining them into the same coordinate system will significantly improve the efficiency of conveying information in the visualization.\n\n\nShow the code\n# Combine data for both years and create a new column for year\ndata_2023$Year &lt;- \"2023\"\ndata_2024$Year &lt;- \"2024\"\ncombined_data &lt;- rbind(data_2023, data_2024)\n\n# Plot combined data\ncombined_plot &lt;- ggplot(combined_data, aes(x = `Type.of.Sale`, y = `Unit.Price....PSF.`, fill = Year)) +\n  geom_boxplot(position = position_dodge(width = 0.85), alpha = 0.7) +\n  ggtitle(\"Transacted Prices Comparison\") +\n  labs(x = \"Type of Sale\", y = \"Unit Price($)\") +\n  scale_fill_manual(values = c(\"2023\" = \"#1a80bb\", \"2024\" = \"#f2c45f\")) +\n  theme_minimal()\n\n# Rotate x-axis labels for better readability\ncombined_plot &lt;- combined_plot + theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Display the plot\nprint(combined_plot)\n\n\n\n\n\n\n\n4.3 Add more information to the visualization\nInclude richer statistical information such as the mean, median, etc., for each price group. Replace the box plot with a violin plot to provide more detailed information about the density of price distribution.\n\n\nShow the code\n# Combine data for both years and create a new column for year\n# Combine data for both years and create a new column for year\ndata_2023$Year &lt;- \"2023\"\ndata_2024$Year &lt;- \"2024\"\ncombined_data &lt;- rbind(data_2023, data_2024)\n\n# Plot combined data\ncombined_plot &lt;- ggplot(combined_data, aes(x = `Type.of.Sale`, y = `Unit.Price....PSF.`, fill = Year)) +\n  geom_violin(trim = FALSE, alpha = 0.7) +  # Use violin plot with transparency\n  ggtitle(\"Transacted Prices Comparison\") +\n  labs(x = \"Type of Sale\", y = \"Unit Price($)\") +\n  scale_fill_manual(values = c(\"2023\" = \"#1a80bb\", \"2024\" = \"#f2c45f\")) +\n  theme_minimal()\n\n# Rotate x-axis labels for better readability\ncombined_plot &lt;- combined_plot + theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Display the plot\nprint(combined_plot)\n\n\n\n\n\n\n\n4.4 Improve Labeling, Axis Display, and Interactivity\nEnhance the clarity of labels and axis displays in the plot by formatting numbers with thousands separators. Additionally, introduce interactivity to allow users to explore more detailed information.\n\nThe PlotThe code chunk\n\n\n\n\n\n\nstats_data &lt;- combined_data %&gt;%\n  group_by(Year, Type.of.Sale) %&gt;%\n  summarise(mean = mean(Unit.Price....PSF.))\n\n\nsuppressWarnings({\n  plot_ly(combined_data, x = ~Type.of.Sale, y = ~Unit.Price....PSF., color = ~Year, colors = c(\"#1a80bb\", \"#f2c45f\"),\n        type = \"violin\",\n        box = list(visible = T, line = list(color = \"black\", width = 1)),\n        meanline = list(visible = T),\n        opacity = 0.7,\n        hoverinfo = \"text\",\n        text = ~paste(\"Year: \", Year, \"&lt;br&gt;Type of Sale: \", Type.of.Sale, \"&lt;br&gt;Unit Price: $\", format(round(Unit.Price....PSF., 0), big.mark = \",\"))) %&gt;%\n  layout(title = list(text = \"Transacted Prices Comparison\", x = 0.5, y = 2, font = list(size = 16)),\n         xaxis = list(title = list(text = \"Type of Sale\", font = list(size = 12)), tickfont = list(size = 12)),\n         yaxis = list(title = list(text = \"Unit Price($)\", font = list(size = 12)), tickfont = list(size = 12), tickformat = \",\"),\n         legend = list(title = list(text = \"Year\")),\n         violinmode = \"group\",\n         annotations = list(\n           list(\n             x = \"New Sale\", y = stats_data$mean[stats_data$Type.of.Sale == \"New Sale\" & stats_data$Year == \"2023\"],\n             text = paste(\"mean:\", format(round(stats_data$mean[stats_data$Type.of.Sale == \"New Sale\" & stats_data$Year == \"2023\"], 0), big.mark = \",\")),\n             showarrow = F, xref = \"x\", yref = \"y\", yshift = 130, xshift = 20\n           ),\n           list(\n             x = \"Resale\", y = stats_data$mean[stats_data$Type.of.Sale == \"Resale\" & stats_data$Year == \"2023\"],\n             text = paste(\"mean:\", format(round(stats_data$mean[stats_data$Type.of.Sale == \"Resale\" & stats_data$Year == \"2023\"], 0), big.mark = \",\")),\n             showarrow = F, xref = \"x\", yref = \"y\", yshift = 165, xshift = 20\n           ),\n           list(\n             x = \"Sub Sale\", y = stats_data$mean[stats_data$Type.of.Sale == \"Sub Sale\" & stats_data$Year == \"2023\"],\n             text = paste(\"mean:\", format(round(stats_data$mean[stats_data$Type.of.Sale == \"Sub Sale\" & stats_data$Year == \"2023\"], 0), big.mark = \",\")),\n             showarrow = F, xref = \"x\", yref = \"y\", yshift = 130, xshift = 20\n           ),\n           list(\n             x = \"New Sale\", y = stats_data$mean[stats_data$Type.of.Sale == \"New Sale\" & stats_data$Year == \"2024\"],\n             text = paste(\"mean:\", format(round(stats_data$mean[stats_data$Type.of.Sale == \"New Sale\" & stats_data$Year == \"2024\"], 0), big.mark = \",\")),\n             showarrow = F, xref = \"x\", yref = \"y\", yshift = -50, xshift = 65\n           ),\n           list(\n             x = \"Resale\", y = stats_data$mean[stats_data$Type.of.Sale == \"Resale\" & stats_data$Year == \"2024\"],\n             text = paste(\"mean:\", format(round(stats_data$mean[stats_data$Type.of.Sale == \"Resale\" & stats_data$Year == \"2024\"], 0), big.mark = \",\")),\n             showarrow = F, xref = \"x\", yref = \"y\", yshift = -50, xshift = 68\n           ),\n           list(\n             x = \"Sub Sale\", y = stats_data$mean[stats_data$Type.of.Sale == \"Sub Sale\" & stats_data$Year == \"2024\"],\n             text = paste(\"mean:\", format(round(stats_data$mean[stats_data$Type.of.Sale == \"Sub Sale\" & stats_data$Year == \"2024\"], 0), big.mark = \",\")),\n             showarrow = F, xref = \"x\", yref = \"y\", yshift = -40, xshift = 68\n           )\n         ))\n})"
  }
]